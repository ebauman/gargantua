/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/hobbyfarm/gargantua/pkg/apis/hobbyfarm.io/v1"
	clientset "github.com/hobbyfarm/gargantua/pkg/generated/clientset/versioned/typed/hobbyfarm.io/v1"
	informers "github.com/hobbyfarm/gargantua/pkg/generated/informers/externalversions/hobbyfarm.io/v1"
	listers "github.com/hobbyfarm/gargantua/pkg/generated/listers/hobbyfarm.io/v1"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type ScheduledEventHandler func(string, *v1.ScheduledEvent) (*v1.ScheduledEvent, error)

type ScheduledEventController interface {
	generic.ControllerMeta
	ScheduledEventClient

	OnChange(ctx context.Context, name string, sync ScheduledEventHandler)
	OnRemove(ctx context.Context, name string, sync ScheduledEventHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() ScheduledEventCache
}

type ScheduledEventClient interface {
	Create(*v1.ScheduledEvent) (*v1.ScheduledEvent, error)
	Update(*v1.ScheduledEvent) (*v1.ScheduledEvent, error)
	UpdateStatus(*v1.ScheduledEvent) (*v1.ScheduledEvent, error)
	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v1.ScheduledEvent, error)
	List(opts metav1.ListOptions) (*v1.ScheduledEventList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.ScheduledEvent, err error)
}

type ScheduledEventCache interface {
	Get(name string) (*v1.ScheduledEvent, error)
	List(selector labels.Selector) ([]*v1.ScheduledEvent, error)

	AddIndexer(indexName string, indexer ScheduledEventIndexer)
	GetByIndex(indexName, key string) ([]*v1.ScheduledEvent, error)
}

type ScheduledEventIndexer func(obj *v1.ScheduledEvent) ([]string, error)

type scheduledEventController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.ScheduledEventsGetter
	informer          informers.ScheduledEventInformer
	gvk               schema.GroupVersionKind
}

func NewScheduledEventController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.ScheduledEventsGetter, informer informers.ScheduledEventInformer) ScheduledEventController {
	return &scheduledEventController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromScheduledEventHandlerToHandler(sync ScheduledEventHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.ScheduledEvent
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.ScheduledEvent))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *scheduledEventController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.ScheduledEvent))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateScheduledEventDeepCopyOnChange(client ScheduledEventClient, obj *v1.ScheduledEvent, handler func(obj *v1.ScheduledEvent) (*v1.ScheduledEvent, error)) (*v1.ScheduledEvent, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *scheduledEventController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *scheduledEventController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *scheduledEventController) OnChange(ctx context.Context, name string, sync ScheduledEventHandler) {
	c.AddGenericHandler(ctx, name, FromScheduledEventHandlerToHandler(sync))
}

func (c *scheduledEventController) OnRemove(ctx context.Context, name string, sync ScheduledEventHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromScheduledEventHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *scheduledEventController) Enqueue(name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), "", name)
}

func (c *scheduledEventController) EnqueueAfter(name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), "", name, duration)
}

func (c *scheduledEventController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *scheduledEventController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *scheduledEventController) Cache() ScheduledEventCache {
	return &scheduledEventCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *scheduledEventController) Create(obj *v1.ScheduledEvent) (*v1.ScheduledEvent, error) {
	return c.clientGetter.ScheduledEvents().Create(obj)
}

func (c *scheduledEventController) Update(obj *v1.ScheduledEvent) (*v1.ScheduledEvent, error) {
	return c.clientGetter.ScheduledEvents().Update(obj)
}

func (c *scheduledEventController) UpdateStatus(obj *v1.ScheduledEvent) (*v1.ScheduledEvent, error) {
	return c.clientGetter.ScheduledEvents().UpdateStatus(obj)
}

func (c *scheduledEventController) Delete(name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.ScheduledEvents().Delete(name, options)
}

func (c *scheduledEventController) Get(name string, options metav1.GetOptions) (*v1.ScheduledEvent, error) {
	return c.clientGetter.ScheduledEvents().Get(name, options)
}

func (c *scheduledEventController) List(opts metav1.ListOptions) (*v1.ScheduledEventList, error) {
	return c.clientGetter.ScheduledEvents().List(opts)
}

func (c *scheduledEventController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.ScheduledEvents().Watch(opts)
}

func (c *scheduledEventController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.ScheduledEvent, err error) {
	return c.clientGetter.ScheduledEvents().Patch(name, pt, data, subresources...)
}

type scheduledEventCache struct {
	lister  listers.ScheduledEventLister
	indexer cache.Indexer
}

func (c *scheduledEventCache) Get(name string) (*v1.ScheduledEvent, error) {
	return c.lister.Get(name)
}

func (c *scheduledEventCache) List(selector labels.Selector) ([]*v1.ScheduledEvent, error) {
	return c.lister.List(selector)
}

func (c *scheduledEventCache) AddIndexer(indexName string, indexer ScheduledEventIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.ScheduledEvent))
		},
	}))
}

func (c *scheduledEventCache) GetByIndex(indexName, key string) (result []*v1.ScheduledEvent, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1.ScheduledEvent))
	}
	return result, nil
}

type ScheduledEventStatusHandler func(obj *v1.ScheduledEvent, status v1.ScheduledEventStatus) (v1.ScheduledEventStatus, error)

type ScheduledEventGeneratingHandler func(obj *v1.ScheduledEvent, status v1.ScheduledEventStatus) ([]runtime.Object, v1.ScheduledEventStatus, error)

func RegisterScheduledEventStatusHandler(ctx context.Context, controller ScheduledEventController, condition condition.Cond, name string, handler ScheduledEventStatusHandler) {
	statusHandler := &scheduledEventStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromScheduledEventHandlerToHandler(statusHandler.sync))
}

func RegisterScheduledEventGeneratingHandler(ctx context.Context, controller ScheduledEventController, apply apply.Apply,
	condition condition.Cond, name string, handler ScheduledEventGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &scheduledEventGeneratingHandler{
		ScheduledEventGeneratingHandler: handler,
		apply:                           apply,
		name:                            name,
		gvk:                             controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	RegisterScheduledEventStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type scheduledEventStatusHandler struct {
	client    ScheduledEventClient
	condition condition.Cond
	handler   ScheduledEventStatusHandler
}

func (a *scheduledEventStatusHandler) sync(key string, obj *v1.ScheduledEvent) (*v1.ScheduledEvent, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	obj.Status = newStatus
	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(obj, "", nil)
		} else {
			a.condition.SetError(obj, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, obj.Status) {
		var newErr error
		obj, newErr = a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
	}
	return obj, err
}

type scheduledEventGeneratingHandler struct {
	ScheduledEventGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *scheduledEventGeneratingHandler) Handle(obj *v1.ScheduledEvent, status v1.ScheduledEventStatus) (v1.ScheduledEventStatus, error) {
	objs, newStatus, err := a.ScheduledEventGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	apply := a.apply

	if !a.opts.DynamicLookup {
		apply = apply.WithStrictCaching()
	}

	if !a.opts.AllowCrossNamespace && !a.opts.AllowClusterScoped {
		apply = apply.WithSetOwnerReference(true, false).
			WithDefaultNamespace(obj.GetNamespace()).
			WithListerNamespace(obj.GetNamespace())
	}

	if !a.opts.AllowClusterScoped {
		apply = apply.WithRestrictClusterScoped()
	}

	return newStatus, apply.
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
