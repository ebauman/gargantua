/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/hobbyfarm/gargantua/pkg/apis/hobbyfarm.io/v1"
	clientset "github.com/hobbyfarm/gargantua/pkg/generated/clientset/versioned/typed/hobbyfarm.io/v1"
	informers "github.com/hobbyfarm/gargantua/pkg/generated/informers/externalversions/hobbyfarm.io/v1"
	listers "github.com/hobbyfarm/gargantua/pkg/generated/listers/hobbyfarm.io/v1"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type DynamicBindRequestHandler func(string, *v1.DynamicBindRequest) (*v1.DynamicBindRequest, error)

type DynamicBindRequestController interface {
	generic.ControllerMeta
	DynamicBindRequestClient

	OnChange(ctx context.Context, name string, sync DynamicBindRequestHandler)
	OnRemove(ctx context.Context, name string, sync DynamicBindRequestHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() DynamicBindRequestCache
}

type DynamicBindRequestClient interface {
	Create(*v1.DynamicBindRequest) (*v1.DynamicBindRequest, error)
	Update(*v1.DynamicBindRequest) (*v1.DynamicBindRequest, error)
	UpdateStatus(*v1.DynamicBindRequest) (*v1.DynamicBindRequest, error)
	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v1.DynamicBindRequest, error)
	List(opts metav1.ListOptions) (*v1.DynamicBindRequestList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.DynamicBindRequest, err error)
}

type DynamicBindRequestCache interface {
	Get(name string) (*v1.DynamicBindRequest, error)
	List(selector labels.Selector) ([]*v1.DynamicBindRequest, error)

	AddIndexer(indexName string, indexer DynamicBindRequestIndexer)
	GetByIndex(indexName, key string) ([]*v1.DynamicBindRequest, error)
}

type DynamicBindRequestIndexer func(obj *v1.DynamicBindRequest) ([]string, error)

type dynamicBindRequestController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.DynamicBindRequestsGetter
	informer          informers.DynamicBindRequestInformer
	gvk               schema.GroupVersionKind
}

func NewDynamicBindRequestController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.DynamicBindRequestsGetter, informer informers.DynamicBindRequestInformer) DynamicBindRequestController {
	return &dynamicBindRequestController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromDynamicBindRequestHandlerToHandler(sync DynamicBindRequestHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.DynamicBindRequest
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.DynamicBindRequest))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *dynamicBindRequestController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.DynamicBindRequest))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateDynamicBindRequestDeepCopyOnChange(client DynamicBindRequestClient, obj *v1.DynamicBindRequest, handler func(obj *v1.DynamicBindRequest) (*v1.DynamicBindRequest, error)) (*v1.DynamicBindRequest, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *dynamicBindRequestController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *dynamicBindRequestController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *dynamicBindRequestController) OnChange(ctx context.Context, name string, sync DynamicBindRequestHandler) {
	c.AddGenericHandler(ctx, name, FromDynamicBindRequestHandlerToHandler(sync))
}

func (c *dynamicBindRequestController) OnRemove(ctx context.Context, name string, sync DynamicBindRequestHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromDynamicBindRequestHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *dynamicBindRequestController) Enqueue(name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), "", name)
}

func (c *dynamicBindRequestController) EnqueueAfter(name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), "", name, duration)
}

func (c *dynamicBindRequestController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *dynamicBindRequestController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *dynamicBindRequestController) Cache() DynamicBindRequestCache {
	return &dynamicBindRequestCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *dynamicBindRequestController) Create(obj *v1.DynamicBindRequest) (*v1.DynamicBindRequest, error) {
	return c.clientGetter.DynamicBindRequests().Create(obj)
}

func (c *dynamicBindRequestController) Update(obj *v1.DynamicBindRequest) (*v1.DynamicBindRequest, error) {
	return c.clientGetter.DynamicBindRequests().Update(obj)
}

func (c *dynamicBindRequestController) UpdateStatus(obj *v1.DynamicBindRequest) (*v1.DynamicBindRequest, error) {
	return c.clientGetter.DynamicBindRequests().UpdateStatus(obj)
}

func (c *dynamicBindRequestController) Delete(name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.DynamicBindRequests().Delete(name, options)
}

func (c *dynamicBindRequestController) Get(name string, options metav1.GetOptions) (*v1.DynamicBindRequest, error) {
	return c.clientGetter.DynamicBindRequests().Get(name, options)
}

func (c *dynamicBindRequestController) List(opts metav1.ListOptions) (*v1.DynamicBindRequestList, error) {
	return c.clientGetter.DynamicBindRequests().List(opts)
}

func (c *dynamicBindRequestController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.DynamicBindRequests().Watch(opts)
}

func (c *dynamicBindRequestController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.DynamicBindRequest, err error) {
	return c.clientGetter.DynamicBindRequests().Patch(name, pt, data, subresources...)
}

type dynamicBindRequestCache struct {
	lister  listers.DynamicBindRequestLister
	indexer cache.Indexer
}

func (c *dynamicBindRequestCache) Get(name string) (*v1.DynamicBindRequest, error) {
	return c.lister.Get(name)
}

func (c *dynamicBindRequestCache) List(selector labels.Selector) ([]*v1.DynamicBindRequest, error) {
	return c.lister.List(selector)
}

func (c *dynamicBindRequestCache) AddIndexer(indexName string, indexer DynamicBindRequestIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.DynamicBindRequest))
		},
	}))
}

func (c *dynamicBindRequestCache) GetByIndex(indexName, key string) (result []*v1.DynamicBindRequest, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1.DynamicBindRequest))
	}
	return result, nil
}

type DynamicBindRequestStatusHandler func(obj *v1.DynamicBindRequest, status v1.DynamicBindRequestStatus) (v1.DynamicBindRequestStatus, error)

type DynamicBindRequestGeneratingHandler func(obj *v1.DynamicBindRequest, status v1.DynamicBindRequestStatus) ([]runtime.Object, v1.DynamicBindRequestStatus, error)

func RegisterDynamicBindRequestStatusHandler(ctx context.Context, controller DynamicBindRequestController, condition condition.Cond, name string, handler DynamicBindRequestStatusHandler) {
	statusHandler := &dynamicBindRequestStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromDynamicBindRequestHandlerToHandler(statusHandler.sync))
}

func RegisterDynamicBindRequestGeneratingHandler(ctx context.Context, controller DynamicBindRequestController, apply apply.Apply,
	condition condition.Cond, name string, handler DynamicBindRequestGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &dynamicBindRequestGeneratingHandler{
		DynamicBindRequestGeneratingHandler: handler,
		apply:                               apply,
		name:                                name,
		gvk:                                 controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	RegisterDynamicBindRequestStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type dynamicBindRequestStatusHandler struct {
	client    DynamicBindRequestClient
	condition condition.Cond
	handler   DynamicBindRequestStatusHandler
}

func (a *dynamicBindRequestStatusHandler) sync(key string, obj *v1.DynamicBindRequest) (*v1.DynamicBindRequest, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	obj.Status = newStatus
	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(obj, "", nil)
		} else {
			a.condition.SetError(obj, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, obj.Status) {
		var newErr error
		obj, newErr = a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
	}
	return obj, err
}

type dynamicBindRequestGeneratingHandler struct {
	DynamicBindRequestGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *dynamicBindRequestGeneratingHandler) Handle(obj *v1.DynamicBindRequest, status v1.DynamicBindRequestStatus) (v1.DynamicBindRequestStatus, error) {
	objs, newStatus, err := a.DynamicBindRequestGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	apply := a.apply

	if !a.opts.DynamicLookup {
		apply = apply.WithStrictCaching()
	}

	if !a.opts.AllowCrossNamespace && !a.opts.AllowClusterScoped {
		apply = apply.WithSetOwnerReference(true, false).
			WithDefaultNamespace(obj.GetNamespace()).
			WithListerNamespace(obj.GetNamespace())
	}

	if !a.opts.AllowClusterScoped {
		apply = apply.WithRestrictClusterScoped()
	}

	return newStatus, apply.
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
