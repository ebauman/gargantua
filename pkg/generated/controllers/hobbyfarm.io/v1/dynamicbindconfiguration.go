/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/hobbyfarm/gargantua/pkg/apis/hobbyfarm.io/v1"
	clientset "github.com/hobbyfarm/gargantua/pkg/generated/clientset/versioned/typed/hobbyfarm.io/v1"
	informers "github.com/hobbyfarm/gargantua/pkg/generated/informers/externalversions/hobbyfarm.io/v1"
	listers "github.com/hobbyfarm/gargantua/pkg/generated/listers/hobbyfarm.io/v1"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type DynamicBindConfigurationHandler func(string, *v1.DynamicBindConfiguration) (*v1.DynamicBindConfiguration, error)

type DynamicBindConfigurationController interface {
	generic.ControllerMeta
	DynamicBindConfigurationClient

	OnChange(ctx context.Context, name string, sync DynamicBindConfigurationHandler)
	OnRemove(ctx context.Context, name string, sync DynamicBindConfigurationHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() DynamicBindConfigurationCache
}

type DynamicBindConfigurationClient interface {
	Create(*v1.DynamicBindConfiguration) (*v1.DynamicBindConfiguration, error)
	Update(*v1.DynamicBindConfiguration) (*v1.DynamicBindConfiguration, error)

	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v1.DynamicBindConfiguration, error)
	List(opts metav1.ListOptions) (*v1.DynamicBindConfigurationList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.DynamicBindConfiguration, err error)
}

type DynamicBindConfigurationCache interface {
	Get(name string) (*v1.DynamicBindConfiguration, error)
	List(selector labels.Selector) ([]*v1.DynamicBindConfiguration, error)

	AddIndexer(indexName string, indexer DynamicBindConfigurationIndexer)
	GetByIndex(indexName, key string) ([]*v1.DynamicBindConfiguration, error)
}

type DynamicBindConfigurationIndexer func(obj *v1.DynamicBindConfiguration) ([]string, error)

type dynamicBindConfigurationController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.DynamicBindConfigurationsGetter
	informer          informers.DynamicBindConfigurationInformer
	gvk               schema.GroupVersionKind
}

func NewDynamicBindConfigurationController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.DynamicBindConfigurationsGetter, informer informers.DynamicBindConfigurationInformer) DynamicBindConfigurationController {
	return &dynamicBindConfigurationController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromDynamicBindConfigurationHandlerToHandler(sync DynamicBindConfigurationHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.DynamicBindConfiguration
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.DynamicBindConfiguration))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *dynamicBindConfigurationController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.DynamicBindConfiguration))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateDynamicBindConfigurationDeepCopyOnChange(client DynamicBindConfigurationClient, obj *v1.DynamicBindConfiguration, handler func(obj *v1.DynamicBindConfiguration) (*v1.DynamicBindConfiguration, error)) (*v1.DynamicBindConfiguration, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *dynamicBindConfigurationController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *dynamicBindConfigurationController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *dynamicBindConfigurationController) OnChange(ctx context.Context, name string, sync DynamicBindConfigurationHandler) {
	c.AddGenericHandler(ctx, name, FromDynamicBindConfigurationHandlerToHandler(sync))
}

func (c *dynamicBindConfigurationController) OnRemove(ctx context.Context, name string, sync DynamicBindConfigurationHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromDynamicBindConfigurationHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *dynamicBindConfigurationController) Enqueue(name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), "", name)
}

func (c *dynamicBindConfigurationController) EnqueueAfter(name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), "", name, duration)
}

func (c *dynamicBindConfigurationController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *dynamicBindConfigurationController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *dynamicBindConfigurationController) Cache() DynamicBindConfigurationCache {
	return &dynamicBindConfigurationCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *dynamicBindConfigurationController) Create(obj *v1.DynamicBindConfiguration) (*v1.DynamicBindConfiguration, error) {
	return c.clientGetter.DynamicBindConfigurations().Create(obj)
}

func (c *dynamicBindConfigurationController) Update(obj *v1.DynamicBindConfiguration) (*v1.DynamicBindConfiguration, error) {
	return c.clientGetter.DynamicBindConfigurations().Update(obj)
}

func (c *dynamicBindConfigurationController) Delete(name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.DynamicBindConfigurations().Delete(name, options)
}

func (c *dynamicBindConfigurationController) Get(name string, options metav1.GetOptions) (*v1.DynamicBindConfiguration, error) {
	return c.clientGetter.DynamicBindConfigurations().Get(name, options)
}

func (c *dynamicBindConfigurationController) List(opts metav1.ListOptions) (*v1.DynamicBindConfigurationList, error) {
	return c.clientGetter.DynamicBindConfigurations().List(opts)
}

func (c *dynamicBindConfigurationController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.DynamicBindConfigurations().Watch(opts)
}

func (c *dynamicBindConfigurationController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.DynamicBindConfiguration, err error) {
	return c.clientGetter.DynamicBindConfigurations().Patch(name, pt, data, subresources...)
}

type dynamicBindConfigurationCache struct {
	lister  listers.DynamicBindConfigurationLister
	indexer cache.Indexer
}

func (c *dynamicBindConfigurationCache) Get(name string) (*v1.DynamicBindConfiguration, error) {
	return c.lister.Get(name)
}

func (c *dynamicBindConfigurationCache) List(selector labels.Selector) ([]*v1.DynamicBindConfiguration, error) {
	return c.lister.List(selector)
}

func (c *dynamicBindConfigurationCache) AddIndexer(indexName string, indexer DynamicBindConfigurationIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.DynamicBindConfiguration))
		},
	}))
}

func (c *dynamicBindConfigurationCache) GetByIndex(indexName, key string) (result []*v1.DynamicBindConfiguration, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1.DynamicBindConfiguration))
	}
	return result, nil
}
