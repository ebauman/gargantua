/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/hobbyfarm/gargantua/pkg/apis/hobbyfarm.io/v1"
	clientset "github.com/hobbyfarm/gargantua/pkg/generated/clientset/versioned/typed/hobbyfarm.io/v1"
	informers "github.com/hobbyfarm/gargantua/pkg/generated/informers/externalversions/hobbyfarm.io/v1"
	listers "github.com/hobbyfarm/gargantua/pkg/generated/listers/hobbyfarm.io/v1"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type VirtualMachineSetHandler func(string, *v1.VirtualMachineSet) (*v1.VirtualMachineSet, error)

type VirtualMachineSetController interface {
	generic.ControllerMeta
	VirtualMachineSetClient

	OnChange(ctx context.Context, name string, sync VirtualMachineSetHandler)
	OnRemove(ctx context.Context, name string, sync VirtualMachineSetHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() VirtualMachineSetCache
}

type VirtualMachineSetClient interface {
	Create(*v1.VirtualMachineSet) (*v1.VirtualMachineSet, error)
	Update(*v1.VirtualMachineSet) (*v1.VirtualMachineSet, error)
	UpdateStatus(*v1.VirtualMachineSet) (*v1.VirtualMachineSet, error)
	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v1.VirtualMachineSet, error)
	List(opts metav1.ListOptions) (*v1.VirtualMachineSetList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.VirtualMachineSet, err error)
}

type VirtualMachineSetCache interface {
	Get(name string) (*v1.VirtualMachineSet, error)
	List(selector labels.Selector) ([]*v1.VirtualMachineSet, error)

	AddIndexer(indexName string, indexer VirtualMachineSetIndexer)
	GetByIndex(indexName, key string) ([]*v1.VirtualMachineSet, error)
}

type VirtualMachineSetIndexer func(obj *v1.VirtualMachineSet) ([]string, error)

type virtualMachineSetController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.VirtualMachineSetsGetter
	informer          informers.VirtualMachineSetInformer
	gvk               schema.GroupVersionKind
}

func NewVirtualMachineSetController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.VirtualMachineSetsGetter, informer informers.VirtualMachineSetInformer) VirtualMachineSetController {
	return &virtualMachineSetController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromVirtualMachineSetHandlerToHandler(sync VirtualMachineSetHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.VirtualMachineSet
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.VirtualMachineSet))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *virtualMachineSetController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.VirtualMachineSet))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateVirtualMachineSetDeepCopyOnChange(client VirtualMachineSetClient, obj *v1.VirtualMachineSet, handler func(obj *v1.VirtualMachineSet) (*v1.VirtualMachineSet, error)) (*v1.VirtualMachineSet, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *virtualMachineSetController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *virtualMachineSetController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *virtualMachineSetController) OnChange(ctx context.Context, name string, sync VirtualMachineSetHandler) {
	c.AddGenericHandler(ctx, name, FromVirtualMachineSetHandlerToHandler(sync))
}

func (c *virtualMachineSetController) OnRemove(ctx context.Context, name string, sync VirtualMachineSetHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromVirtualMachineSetHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *virtualMachineSetController) Enqueue(name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), "", name)
}

func (c *virtualMachineSetController) EnqueueAfter(name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), "", name, duration)
}

func (c *virtualMachineSetController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *virtualMachineSetController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *virtualMachineSetController) Cache() VirtualMachineSetCache {
	return &virtualMachineSetCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *virtualMachineSetController) Create(obj *v1.VirtualMachineSet) (*v1.VirtualMachineSet, error) {
	return c.clientGetter.VirtualMachineSets().Create(obj)
}

func (c *virtualMachineSetController) Update(obj *v1.VirtualMachineSet) (*v1.VirtualMachineSet, error) {
	return c.clientGetter.VirtualMachineSets().Update(obj)
}

func (c *virtualMachineSetController) UpdateStatus(obj *v1.VirtualMachineSet) (*v1.VirtualMachineSet, error) {
	return c.clientGetter.VirtualMachineSets().UpdateStatus(obj)
}

func (c *virtualMachineSetController) Delete(name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.VirtualMachineSets().Delete(name, options)
}

func (c *virtualMachineSetController) Get(name string, options metav1.GetOptions) (*v1.VirtualMachineSet, error) {
	return c.clientGetter.VirtualMachineSets().Get(name, options)
}

func (c *virtualMachineSetController) List(opts metav1.ListOptions) (*v1.VirtualMachineSetList, error) {
	return c.clientGetter.VirtualMachineSets().List(opts)
}

func (c *virtualMachineSetController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.VirtualMachineSets().Watch(opts)
}

func (c *virtualMachineSetController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.VirtualMachineSet, err error) {
	return c.clientGetter.VirtualMachineSets().Patch(name, pt, data, subresources...)
}

type virtualMachineSetCache struct {
	lister  listers.VirtualMachineSetLister
	indexer cache.Indexer
}

func (c *virtualMachineSetCache) Get(name string) (*v1.VirtualMachineSet, error) {
	return c.lister.Get(name)
}

func (c *virtualMachineSetCache) List(selector labels.Selector) ([]*v1.VirtualMachineSet, error) {
	return c.lister.List(selector)
}

func (c *virtualMachineSetCache) AddIndexer(indexName string, indexer VirtualMachineSetIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.VirtualMachineSet))
		},
	}))
}

func (c *virtualMachineSetCache) GetByIndex(indexName, key string) (result []*v1.VirtualMachineSet, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1.VirtualMachineSet))
	}
	return result, nil
}

type VirtualMachineSetStatusHandler func(obj *v1.VirtualMachineSet, status v1.VirtualMachineSetStatus) (v1.VirtualMachineSetStatus, error)

type VirtualMachineSetGeneratingHandler func(obj *v1.VirtualMachineSet, status v1.VirtualMachineSetStatus) ([]runtime.Object, v1.VirtualMachineSetStatus, error)

func RegisterVirtualMachineSetStatusHandler(ctx context.Context, controller VirtualMachineSetController, condition condition.Cond, name string, handler VirtualMachineSetStatusHandler) {
	statusHandler := &virtualMachineSetStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromVirtualMachineSetHandlerToHandler(statusHandler.sync))
}

func RegisterVirtualMachineSetGeneratingHandler(ctx context.Context, controller VirtualMachineSetController, apply apply.Apply,
	condition condition.Cond, name string, handler VirtualMachineSetGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &virtualMachineSetGeneratingHandler{
		VirtualMachineSetGeneratingHandler: handler,
		apply:                              apply,
		name:                               name,
		gvk:                                controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	RegisterVirtualMachineSetStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type virtualMachineSetStatusHandler struct {
	client    VirtualMachineSetClient
	condition condition.Cond
	handler   VirtualMachineSetStatusHandler
}

func (a *virtualMachineSetStatusHandler) sync(key string, obj *v1.VirtualMachineSet) (*v1.VirtualMachineSet, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	obj.Status = newStatus
	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(obj, "", nil)
		} else {
			a.condition.SetError(obj, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, obj.Status) {
		var newErr error
		obj, newErr = a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
	}
	return obj, err
}

type virtualMachineSetGeneratingHandler struct {
	VirtualMachineSetGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *virtualMachineSetGeneratingHandler) Handle(obj *v1.VirtualMachineSet, status v1.VirtualMachineSetStatus) (v1.VirtualMachineSetStatus, error) {
	objs, newStatus, err := a.VirtualMachineSetGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	apply := a.apply

	if !a.opts.DynamicLookup {
		apply = apply.WithStrictCaching()
	}

	if !a.opts.AllowCrossNamespace && !a.opts.AllowClusterScoped {
		apply = apply.WithSetOwnerReference(true, false).
			WithDefaultNamespace(obj.GetNamespace()).
			WithListerNamespace(obj.GetNamespace())
	}

	if !a.opts.AllowClusterScoped {
		apply = apply.WithRestrictClusterScoped()
	}

	return newStatus, apply.
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
