/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/hobbyfarm/gargantua/pkg/apis/hobbyfarm.io/v1"
	clientset "github.com/hobbyfarm/gargantua/pkg/generated/clientset/versioned/typed/hobbyfarm.io/v1"
	informers "github.com/hobbyfarm/gargantua/pkg/generated/informers/externalversions/hobbyfarm.io/v1"
	listers "github.com/hobbyfarm/gargantua/pkg/generated/listers/hobbyfarm.io/v1"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type ScenarioSessionHandler func(string, *v1.ScenarioSession) (*v1.ScenarioSession, error)

type ScenarioSessionController interface {
	generic.ControllerMeta
	ScenarioSessionClient

	OnChange(ctx context.Context, name string, sync ScenarioSessionHandler)
	OnRemove(ctx context.Context, name string, sync ScenarioSessionHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() ScenarioSessionCache
}

type ScenarioSessionClient interface {
	Create(*v1.ScenarioSession) (*v1.ScenarioSession, error)
	Update(*v1.ScenarioSession) (*v1.ScenarioSession, error)
	UpdateStatus(*v1.ScenarioSession) (*v1.ScenarioSession, error)
	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v1.ScenarioSession, error)
	List(opts metav1.ListOptions) (*v1.ScenarioSessionList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.ScenarioSession, err error)
}

type ScenarioSessionCache interface {
	Get(name string) (*v1.ScenarioSession, error)
	List(selector labels.Selector) ([]*v1.ScenarioSession, error)

	AddIndexer(indexName string, indexer ScenarioSessionIndexer)
	GetByIndex(indexName, key string) ([]*v1.ScenarioSession, error)
}

type ScenarioSessionIndexer func(obj *v1.ScenarioSession) ([]string, error)

type scenarioSessionController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.ScenarioSessionsGetter
	informer          informers.ScenarioSessionInformer
	gvk               schema.GroupVersionKind
}

func NewScenarioSessionController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.ScenarioSessionsGetter, informer informers.ScenarioSessionInformer) ScenarioSessionController {
	return &scenarioSessionController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromScenarioSessionHandlerToHandler(sync ScenarioSessionHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.ScenarioSession
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.ScenarioSession))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *scenarioSessionController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.ScenarioSession))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateScenarioSessionDeepCopyOnChange(client ScenarioSessionClient, obj *v1.ScenarioSession, handler func(obj *v1.ScenarioSession) (*v1.ScenarioSession, error)) (*v1.ScenarioSession, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *scenarioSessionController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *scenarioSessionController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *scenarioSessionController) OnChange(ctx context.Context, name string, sync ScenarioSessionHandler) {
	c.AddGenericHandler(ctx, name, FromScenarioSessionHandlerToHandler(sync))
}

func (c *scenarioSessionController) OnRemove(ctx context.Context, name string, sync ScenarioSessionHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromScenarioSessionHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *scenarioSessionController) Enqueue(name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), "", name)
}

func (c *scenarioSessionController) EnqueueAfter(name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), "", name, duration)
}

func (c *scenarioSessionController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *scenarioSessionController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *scenarioSessionController) Cache() ScenarioSessionCache {
	return &scenarioSessionCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *scenarioSessionController) Create(obj *v1.ScenarioSession) (*v1.ScenarioSession, error) {
	return c.clientGetter.ScenarioSessions().Create(obj)
}

func (c *scenarioSessionController) Update(obj *v1.ScenarioSession) (*v1.ScenarioSession, error) {
	return c.clientGetter.ScenarioSessions().Update(obj)
}

func (c *scenarioSessionController) UpdateStatus(obj *v1.ScenarioSession) (*v1.ScenarioSession, error) {
	return c.clientGetter.ScenarioSessions().UpdateStatus(obj)
}

func (c *scenarioSessionController) Delete(name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.ScenarioSessions().Delete(name, options)
}

func (c *scenarioSessionController) Get(name string, options metav1.GetOptions) (*v1.ScenarioSession, error) {
	return c.clientGetter.ScenarioSessions().Get(name, options)
}

func (c *scenarioSessionController) List(opts metav1.ListOptions) (*v1.ScenarioSessionList, error) {
	return c.clientGetter.ScenarioSessions().List(opts)
}

func (c *scenarioSessionController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.ScenarioSessions().Watch(opts)
}

func (c *scenarioSessionController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.ScenarioSession, err error) {
	return c.clientGetter.ScenarioSessions().Patch(name, pt, data, subresources...)
}

type scenarioSessionCache struct {
	lister  listers.ScenarioSessionLister
	indexer cache.Indexer
}

func (c *scenarioSessionCache) Get(name string) (*v1.ScenarioSession, error) {
	return c.lister.Get(name)
}

func (c *scenarioSessionCache) List(selector labels.Selector) ([]*v1.ScenarioSession, error) {
	return c.lister.List(selector)
}

func (c *scenarioSessionCache) AddIndexer(indexName string, indexer ScenarioSessionIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.ScenarioSession))
		},
	}))
}

func (c *scenarioSessionCache) GetByIndex(indexName, key string) (result []*v1.ScenarioSession, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1.ScenarioSession))
	}
	return result, nil
}

type ScenarioSessionStatusHandler func(obj *v1.ScenarioSession, status v1.ScenarioSessionStatus) (v1.ScenarioSessionStatus, error)

type ScenarioSessionGeneratingHandler func(obj *v1.ScenarioSession, status v1.ScenarioSessionStatus) ([]runtime.Object, v1.ScenarioSessionStatus, error)

func RegisterScenarioSessionStatusHandler(ctx context.Context, controller ScenarioSessionController, condition condition.Cond, name string, handler ScenarioSessionStatusHandler) {
	statusHandler := &scenarioSessionStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromScenarioSessionHandlerToHandler(statusHandler.sync))
}

func RegisterScenarioSessionGeneratingHandler(ctx context.Context, controller ScenarioSessionController, apply apply.Apply,
	condition condition.Cond, name string, handler ScenarioSessionGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &scenarioSessionGeneratingHandler{
		ScenarioSessionGeneratingHandler: handler,
		apply:                            apply,
		name:                             name,
		gvk:                              controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	RegisterScenarioSessionStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type scenarioSessionStatusHandler struct {
	client    ScenarioSessionClient
	condition condition.Cond
	handler   ScenarioSessionStatusHandler
}

func (a *scenarioSessionStatusHandler) sync(key string, obj *v1.ScenarioSession) (*v1.ScenarioSession, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	obj.Status = newStatus
	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(obj, "", nil)
		} else {
			a.condition.SetError(obj, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, obj.Status) {
		var newErr error
		obj, newErr = a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
	}
	return obj, err
}

type scenarioSessionGeneratingHandler struct {
	ScenarioSessionGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *scenarioSessionGeneratingHandler) Handle(obj *v1.ScenarioSession, status v1.ScenarioSessionStatus) (v1.ScenarioSessionStatus, error) {
	objs, newStatus, err := a.ScenarioSessionGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	apply := a.apply

	if !a.opts.DynamicLookup {
		apply = apply.WithStrictCaching()
	}

	if !a.opts.AllowCrossNamespace && !a.opts.AllowClusterScoped {
		apply = apply.WithSetOwnerReference(true, false).
			WithDefaultNamespace(obj.GetNamespace()).
			WithListerNamespace(obj.GetNamespace())
	}

	if !a.opts.AllowClusterScoped {
		apply = apply.WithRestrictClusterScoped()
	}

	return newStatus, apply.
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
