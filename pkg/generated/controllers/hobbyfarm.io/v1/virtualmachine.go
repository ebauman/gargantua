/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/hobbyfarm/gargantua/pkg/apis/hobbyfarm.io/v1"
	clientset "github.com/hobbyfarm/gargantua/pkg/generated/clientset/versioned/typed/hobbyfarm.io/v1"
	informers "github.com/hobbyfarm/gargantua/pkg/generated/informers/externalversions/hobbyfarm.io/v1"
	listers "github.com/hobbyfarm/gargantua/pkg/generated/listers/hobbyfarm.io/v1"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type VirtualMachineHandler func(string, *v1.VirtualMachine) (*v1.VirtualMachine, error)

type VirtualMachineController interface {
	generic.ControllerMeta
	VirtualMachineClient

	OnChange(ctx context.Context, name string, sync VirtualMachineHandler)
	OnRemove(ctx context.Context, name string, sync VirtualMachineHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() VirtualMachineCache
}

type VirtualMachineClient interface {
	Create(*v1.VirtualMachine) (*v1.VirtualMachine, error)
	Update(*v1.VirtualMachine) (*v1.VirtualMachine, error)
	UpdateStatus(*v1.VirtualMachine) (*v1.VirtualMachine, error)
	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v1.VirtualMachine, error)
	List(opts metav1.ListOptions) (*v1.VirtualMachineList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.VirtualMachine, err error)
}

type VirtualMachineCache interface {
	Get(name string) (*v1.VirtualMachine, error)
	List(selector labels.Selector) ([]*v1.VirtualMachine, error)

	AddIndexer(indexName string, indexer VirtualMachineIndexer)
	GetByIndex(indexName, key string) ([]*v1.VirtualMachine, error)
}

type VirtualMachineIndexer func(obj *v1.VirtualMachine) ([]string, error)

type virtualMachineController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.VirtualMachinesGetter
	informer          informers.VirtualMachineInformer
	gvk               schema.GroupVersionKind
}

func NewVirtualMachineController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.VirtualMachinesGetter, informer informers.VirtualMachineInformer) VirtualMachineController {
	return &virtualMachineController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromVirtualMachineHandlerToHandler(sync VirtualMachineHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.VirtualMachine
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.VirtualMachine))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *virtualMachineController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.VirtualMachine))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateVirtualMachineDeepCopyOnChange(client VirtualMachineClient, obj *v1.VirtualMachine, handler func(obj *v1.VirtualMachine) (*v1.VirtualMachine, error)) (*v1.VirtualMachine, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *virtualMachineController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *virtualMachineController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *virtualMachineController) OnChange(ctx context.Context, name string, sync VirtualMachineHandler) {
	c.AddGenericHandler(ctx, name, FromVirtualMachineHandlerToHandler(sync))
}

func (c *virtualMachineController) OnRemove(ctx context.Context, name string, sync VirtualMachineHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromVirtualMachineHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *virtualMachineController) Enqueue(name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), "", name)
}

func (c *virtualMachineController) EnqueueAfter(name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), "", name, duration)
}

func (c *virtualMachineController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *virtualMachineController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *virtualMachineController) Cache() VirtualMachineCache {
	return &virtualMachineCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *virtualMachineController) Create(obj *v1.VirtualMachine) (*v1.VirtualMachine, error) {
	return c.clientGetter.VirtualMachines().Create(obj)
}

func (c *virtualMachineController) Update(obj *v1.VirtualMachine) (*v1.VirtualMachine, error) {
	return c.clientGetter.VirtualMachines().Update(obj)
}

func (c *virtualMachineController) UpdateStatus(obj *v1.VirtualMachine) (*v1.VirtualMachine, error) {
	return c.clientGetter.VirtualMachines().UpdateStatus(obj)
}

func (c *virtualMachineController) Delete(name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.VirtualMachines().Delete(name, options)
}

func (c *virtualMachineController) Get(name string, options metav1.GetOptions) (*v1.VirtualMachine, error) {
	return c.clientGetter.VirtualMachines().Get(name, options)
}

func (c *virtualMachineController) List(opts metav1.ListOptions) (*v1.VirtualMachineList, error) {
	return c.clientGetter.VirtualMachines().List(opts)
}

func (c *virtualMachineController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.VirtualMachines().Watch(opts)
}

func (c *virtualMachineController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.VirtualMachine, err error) {
	return c.clientGetter.VirtualMachines().Patch(name, pt, data, subresources...)
}

type virtualMachineCache struct {
	lister  listers.VirtualMachineLister
	indexer cache.Indexer
}

func (c *virtualMachineCache) Get(name string) (*v1.VirtualMachine, error) {
	return c.lister.Get(name)
}

func (c *virtualMachineCache) List(selector labels.Selector) ([]*v1.VirtualMachine, error) {
	return c.lister.List(selector)
}

func (c *virtualMachineCache) AddIndexer(indexName string, indexer VirtualMachineIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.VirtualMachine))
		},
	}))
}

func (c *virtualMachineCache) GetByIndex(indexName, key string) (result []*v1.VirtualMachine, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1.VirtualMachine))
	}
	return result, nil
}

type VirtualMachineStatusHandler func(obj *v1.VirtualMachine, status v1.VirtualMachineStatus) (v1.VirtualMachineStatus, error)

type VirtualMachineGeneratingHandler func(obj *v1.VirtualMachine, status v1.VirtualMachineStatus) ([]runtime.Object, v1.VirtualMachineStatus, error)

func RegisterVirtualMachineStatusHandler(ctx context.Context, controller VirtualMachineController, condition condition.Cond, name string, handler VirtualMachineStatusHandler) {
	statusHandler := &virtualMachineStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromVirtualMachineHandlerToHandler(statusHandler.sync))
}

func RegisterVirtualMachineGeneratingHandler(ctx context.Context, controller VirtualMachineController, apply apply.Apply,
	condition condition.Cond, name string, handler VirtualMachineGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &virtualMachineGeneratingHandler{
		VirtualMachineGeneratingHandler: handler,
		apply:                           apply,
		name:                            name,
		gvk:                             controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	RegisterVirtualMachineStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type virtualMachineStatusHandler struct {
	client    VirtualMachineClient
	condition condition.Cond
	handler   VirtualMachineStatusHandler
}

func (a *virtualMachineStatusHandler) sync(key string, obj *v1.VirtualMachine) (*v1.VirtualMachine, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	obj.Status = newStatus
	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(obj, "", nil)
		} else {
			a.condition.SetError(obj, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, obj.Status) {
		var newErr error
		obj, newErr = a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
	}
	return obj, err
}

type virtualMachineGeneratingHandler struct {
	VirtualMachineGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *virtualMachineGeneratingHandler) Handle(obj *v1.VirtualMachine, status v1.VirtualMachineStatus) (v1.VirtualMachineStatus, error) {
	objs, newStatus, err := a.VirtualMachineGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	apply := a.apply

	if !a.opts.DynamicLookup {
		apply = apply.WithStrictCaching()
	}

	if !a.opts.AllowCrossNamespace && !a.opts.AllowClusterScoped {
		apply = apply.WithSetOwnerReference(true, false).
			WithDefaultNamespace(obj.GetNamespace()).
			WithListerNamespace(obj.GetNamespace())
	}

	if !a.opts.AllowClusterScoped {
		apply = apply.WithRestrictClusterScoped()
	}

	return newStatus, apply.
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
