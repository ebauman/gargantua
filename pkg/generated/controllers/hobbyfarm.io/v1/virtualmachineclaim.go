/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/hobbyfarm/gargantua/pkg/apis/hobbyfarm.io/v1"
	clientset "github.com/hobbyfarm/gargantua/pkg/generated/clientset/versioned/typed/hobbyfarm.io/v1"
	informers "github.com/hobbyfarm/gargantua/pkg/generated/informers/externalversions/hobbyfarm.io/v1"
	listers "github.com/hobbyfarm/gargantua/pkg/generated/listers/hobbyfarm.io/v1"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type VirtualMachineClaimHandler func(string, *v1.VirtualMachineClaim) (*v1.VirtualMachineClaim, error)

type VirtualMachineClaimController interface {
	generic.ControllerMeta
	VirtualMachineClaimClient

	OnChange(ctx context.Context, name string, sync VirtualMachineClaimHandler)
	OnRemove(ctx context.Context, name string, sync VirtualMachineClaimHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() VirtualMachineClaimCache
}

type VirtualMachineClaimClient interface {
	Create(*v1.VirtualMachineClaim) (*v1.VirtualMachineClaim, error)
	Update(*v1.VirtualMachineClaim) (*v1.VirtualMachineClaim, error)
	UpdateStatus(*v1.VirtualMachineClaim) (*v1.VirtualMachineClaim, error)
	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v1.VirtualMachineClaim, error)
	List(opts metav1.ListOptions) (*v1.VirtualMachineClaimList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.VirtualMachineClaim, err error)
}

type VirtualMachineClaimCache interface {
	Get(name string) (*v1.VirtualMachineClaim, error)
	List(selector labels.Selector) ([]*v1.VirtualMachineClaim, error)

	AddIndexer(indexName string, indexer VirtualMachineClaimIndexer)
	GetByIndex(indexName, key string) ([]*v1.VirtualMachineClaim, error)
}

type VirtualMachineClaimIndexer func(obj *v1.VirtualMachineClaim) ([]string, error)

type virtualMachineClaimController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.VirtualMachineClaimsGetter
	informer          informers.VirtualMachineClaimInformer
	gvk               schema.GroupVersionKind
}

func NewVirtualMachineClaimController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.VirtualMachineClaimsGetter, informer informers.VirtualMachineClaimInformer) VirtualMachineClaimController {
	return &virtualMachineClaimController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromVirtualMachineClaimHandlerToHandler(sync VirtualMachineClaimHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.VirtualMachineClaim
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.VirtualMachineClaim))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *virtualMachineClaimController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.VirtualMachineClaim))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateVirtualMachineClaimDeepCopyOnChange(client VirtualMachineClaimClient, obj *v1.VirtualMachineClaim, handler func(obj *v1.VirtualMachineClaim) (*v1.VirtualMachineClaim, error)) (*v1.VirtualMachineClaim, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *virtualMachineClaimController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *virtualMachineClaimController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *virtualMachineClaimController) OnChange(ctx context.Context, name string, sync VirtualMachineClaimHandler) {
	c.AddGenericHandler(ctx, name, FromVirtualMachineClaimHandlerToHandler(sync))
}

func (c *virtualMachineClaimController) OnRemove(ctx context.Context, name string, sync VirtualMachineClaimHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromVirtualMachineClaimHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *virtualMachineClaimController) Enqueue(name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), "", name)
}

func (c *virtualMachineClaimController) EnqueueAfter(name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), "", name, duration)
}

func (c *virtualMachineClaimController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *virtualMachineClaimController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *virtualMachineClaimController) Cache() VirtualMachineClaimCache {
	return &virtualMachineClaimCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *virtualMachineClaimController) Create(obj *v1.VirtualMachineClaim) (*v1.VirtualMachineClaim, error) {
	return c.clientGetter.VirtualMachineClaims().Create(obj)
}

func (c *virtualMachineClaimController) Update(obj *v1.VirtualMachineClaim) (*v1.VirtualMachineClaim, error) {
	return c.clientGetter.VirtualMachineClaims().Update(obj)
}

func (c *virtualMachineClaimController) UpdateStatus(obj *v1.VirtualMachineClaim) (*v1.VirtualMachineClaim, error) {
	return c.clientGetter.VirtualMachineClaims().UpdateStatus(obj)
}

func (c *virtualMachineClaimController) Delete(name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.VirtualMachineClaims().Delete(name, options)
}

func (c *virtualMachineClaimController) Get(name string, options metav1.GetOptions) (*v1.VirtualMachineClaim, error) {
	return c.clientGetter.VirtualMachineClaims().Get(name, options)
}

func (c *virtualMachineClaimController) List(opts metav1.ListOptions) (*v1.VirtualMachineClaimList, error) {
	return c.clientGetter.VirtualMachineClaims().List(opts)
}

func (c *virtualMachineClaimController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.VirtualMachineClaims().Watch(opts)
}

func (c *virtualMachineClaimController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.VirtualMachineClaim, err error) {
	return c.clientGetter.VirtualMachineClaims().Patch(name, pt, data, subresources...)
}

type virtualMachineClaimCache struct {
	lister  listers.VirtualMachineClaimLister
	indexer cache.Indexer
}

func (c *virtualMachineClaimCache) Get(name string) (*v1.VirtualMachineClaim, error) {
	return c.lister.Get(name)
}

func (c *virtualMachineClaimCache) List(selector labels.Selector) ([]*v1.VirtualMachineClaim, error) {
	return c.lister.List(selector)
}

func (c *virtualMachineClaimCache) AddIndexer(indexName string, indexer VirtualMachineClaimIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.VirtualMachineClaim))
		},
	}))
}

func (c *virtualMachineClaimCache) GetByIndex(indexName, key string) (result []*v1.VirtualMachineClaim, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1.VirtualMachineClaim))
	}
	return result, nil
}

type VirtualMachineClaimStatusHandler func(obj *v1.VirtualMachineClaim, status v1.VirtualMachineClaimStatus) (v1.VirtualMachineClaimStatus, error)

type VirtualMachineClaimGeneratingHandler func(obj *v1.VirtualMachineClaim, status v1.VirtualMachineClaimStatus) ([]runtime.Object, v1.VirtualMachineClaimStatus, error)

func RegisterVirtualMachineClaimStatusHandler(ctx context.Context, controller VirtualMachineClaimController, condition condition.Cond, name string, handler VirtualMachineClaimStatusHandler) {
	statusHandler := &virtualMachineClaimStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromVirtualMachineClaimHandlerToHandler(statusHandler.sync))
}

func RegisterVirtualMachineClaimGeneratingHandler(ctx context.Context, controller VirtualMachineClaimController, apply apply.Apply,
	condition condition.Cond, name string, handler VirtualMachineClaimGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &virtualMachineClaimGeneratingHandler{
		VirtualMachineClaimGeneratingHandler: handler,
		apply:                                apply,
		name:                                 name,
		gvk:                                  controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	RegisterVirtualMachineClaimStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type virtualMachineClaimStatusHandler struct {
	client    VirtualMachineClaimClient
	condition condition.Cond
	handler   VirtualMachineClaimStatusHandler
}

func (a *virtualMachineClaimStatusHandler) sync(key string, obj *v1.VirtualMachineClaim) (*v1.VirtualMachineClaim, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	obj.Status = newStatus
	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(obj, "", nil)
		} else {
			a.condition.SetError(obj, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, obj.Status) {
		var newErr error
		obj, newErr = a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
	}
	return obj, err
}

type virtualMachineClaimGeneratingHandler struct {
	VirtualMachineClaimGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *virtualMachineClaimGeneratingHandler) Handle(obj *v1.VirtualMachineClaim, status v1.VirtualMachineClaimStatus) (v1.VirtualMachineClaimStatus, error) {
	objs, newStatus, err := a.VirtualMachineClaimGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	apply := a.apply

	if !a.opts.DynamicLookup {
		apply = apply.WithStrictCaching()
	}

	if !a.opts.AllowCrossNamespace && !a.opts.AllowClusterScoped {
		apply = apply.WithSetOwnerReference(true, false).
			WithDefaultNamespace(obj.GetNamespace()).
			WithListerNamespace(obj.GetNamespace())
	}

	if !a.opts.AllowClusterScoped {
		apply = apply.WithRestrictClusterScoped()
	}

	return newStatus, apply.
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
