/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/hobbyfarm/gargantua/pkg/apis/hobbyfarm.io/v1"
	clientset "github.com/hobbyfarm/gargantua/pkg/generated/clientset/versioned/typed/hobbyfarm.io/v1"
	informers "github.com/hobbyfarm/gargantua/pkg/generated/informers/externalversions/hobbyfarm.io/v1"
	listers "github.com/hobbyfarm/gargantua/pkg/generated/listers/hobbyfarm.io/v1"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type ScenarioHandler func(string, *v1.Scenario) (*v1.Scenario, error)

type ScenarioController interface {
	generic.ControllerMeta
	ScenarioClient

	OnChange(ctx context.Context, name string, sync ScenarioHandler)
	OnRemove(ctx context.Context, name string, sync ScenarioHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() ScenarioCache
}

type ScenarioClient interface {
	Create(*v1.Scenario) (*v1.Scenario, error)
	Update(*v1.Scenario) (*v1.Scenario, error)

	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v1.Scenario, error)
	List(opts metav1.ListOptions) (*v1.ScenarioList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Scenario, err error)
}

type ScenarioCache interface {
	Get(name string) (*v1.Scenario, error)
	List(selector labels.Selector) ([]*v1.Scenario, error)

	AddIndexer(indexName string, indexer ScenarioIndexer)
	GetByIndex(indexName, key string) ([]*v1.Scenario, error)
}

type ScenarioIndexer func(obj *v1.Scenario) ([]string, error)

type scenarioController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.ScenariosGetter
	informer          informers.ScenarioInformer
	gvk               schema.GroupVersionKind
}

func NewScenarioController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.ScenariosGetter, informer informers.ScenarioInformer) ScenarioController {
	return &scenarioController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromScenarioHandlerToHandler(sync ScenarioHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.Scenario
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.Scenario))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *scenarioController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.Scenario))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateScenarioDeepCopyOnChange(client ScenarioClient, obj *v1.Scenario, handler func(obj *v1.Scenario) (*v1.Scenario, error)) (*v1.Scenario, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *scenarioController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *scenarioController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *scenarioController) OnChange(ctx context.Context, name string, sync ScenarioHandler) {
	c.AddGenericHandler(ctx, name, FromScenarioHandlerToHandler(sync))
}

func (c *scenarioController) OnRemove(ctx context.Context, name string, sync ScenarioHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromScenarioHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *scenarioController) Enqueue(name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), "", name)
}

func (c *scenarioController) EnqueueAfter(name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), "", name, duration)
}

func (c *scenarioController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *scenarioController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *scenarioController) Cache() ScenarioCache {
	return &scenarioCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *scenarioController) Create(obj *v1.Scenario) (*v1.Scenario, error) {
	return c.clientGetter.Scenarios().Create(obj)
}

func (c *scenarioController) Update(obj *v1.Scenario) (*v1.Scenario, error) {
	return c.clientGetter.Scenarios().Update(obj)
}

func (c *scenarioController) Delete(name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.Scenarios().Delete(name, options)
}

func (c *scenarioController) Get(name string, options metav1.GetOptions) (*v1.Scenario, error) {
	return c.clientGetter.Scenarios().Get(name, options)
}

func (c *scenarioController) List(opts metav1.ListOptions) (*v1.ScenarioList, error) {
	return c.clientGetter.Scenarios().List(opts)
}

func (c *scenarioController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.Scenarios().Watch(opts)
}

func (c *scenarioController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Scenario, err error) {
	return c.clientGetter.Scenarios().Patch(name, pt, data, subresources...)
}

type scenarioCache struct {
	lister  listers.ScenarioLister
	indexer cache.Indexer
}

func (c *scenarioCache) Get(name string) (*v1.Scenario, error) {
	return c.lister.Get(name)
}

func (c *scenarioCache) List(selector labels.Selector) ([]*v1.Scenario, error) {
	return c.lister.List(selector)
}

func (c *scenarioCache) AddIndexer(indexName string, indexer ScenarioIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.Scenario))
		},
	}))
}

func (c *scenarioCache) GetByIndex(indexName, key string) (result []*v1.Scenario, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1.Scenario))
	}
	return result, nil
}
