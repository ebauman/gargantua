/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/hobbyfarm/gargantua/pkg/apis/hobbyfarm.io/v1"
	clientset "github.com/hobbyfarm/gargantua/pkg/generated/clientset/versioned/typed/hobbyfarm.io/v1"
	informers "github.com/hobbyfarm/gargantua/pkg/generated/informers/externalversions/hobbyfarm.io/v1"
	listers "github.com/hobbyfarm/gargantua/pkg/generated/listers/hobbyfarm.io/v1"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type VirtualMachineTemplateHandler func(string, *v1.VirtualMachineTemplate) (*v1.VirtualMachineTemplate, error)

type VirtualMachineTemplateController interface {
	generic.ControllerMeta
	VirtualMachineTemplateClient

	OnChange(ctx context.Context, name string, sync VirtualMachineTemplateHandler)
	OnRemove(ctx context.Context, name string, sync VirtualMachineTemplateHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() VirtualMachineTemplateCache
}

type VirtualMachineTemplateClient interface {
	Create(*v1.VirtualMachineTemplate) (*v1.VirtualMachineTemplate, error)
	Update(*v1.VirtualMachineTemplate) (*v1.VirtualMachineTemplate, error)

	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v1.VirtualMachineTemplate, error)
	List(opts metav1.ListOptions) (*v1.VirtualMachineTemplateList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.VirtualMachineTemplate, err error)
}

type VirtualMachineTemplateCache interface {
	Get(name string) (*v1.VirtualMachineTemplate, error)
	List(selector labels.Selector) ([]*v1.VirtualMachineTemplate, error)

	AddIndexer(indexName string, indexer VirtualMachineTemplateIndexer)
	GetByIndex(indexName, key string) ([]*v1.VirtualMachineTemplate, error)
}

type VirtualMachineTemplateIndexer func(obj *v1.VirtualMachineTemplate) ([]string, error)

type virtualMachineTemplateController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.VirtualMachineTemplatesGetter
	informer          informers.VirtualMachineTemplateInformer
	gvk               schema.GroupVersionKind
}

func NewVirtualMachineTemplateController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.VirtualMachineTemplatesGetter, informer informers.VirtualMachineTemplateInformer) VirtualMachineTemplateController {
	return &virtualMachineTemplateController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromVirtualMachineTemplateHandlerToHandler(sync VirtualMachineTemplateHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.VirtualMachineTemplate
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.VirtualMachineTemplate))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *virtualMachineTemplateController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.VirtualMachineTemplate))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateVirtualMachineTemplateDeepCopyOnChange(client VirtualMachineTemplateClient, obj *v1.VirtualMachineTemplate, handler func(obj *v1.VirtualMachineTemplate) (*v1.VirtualMachineTemplate, error)) (*v1.VirtualMachineTemplate, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *virtualMachineTemplateController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *virtualMachineTemplateController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *virtualMachineTemplateController) OnChange(ctx context.Context, name string, sync VirtualMachineTemplateHandler) {
	c.AddGenericHandler(ctx, name, FromVirtualMachineTemplateHandlerToHandler(sync))
}

func (c *virtualMachineTemplateController) OnRemove(ctx context.Context, name string, sync VirtualMachineTemplateHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromVirtualMachineTemplateHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *virtualMachineTemplateController) Enqueue(name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), "", name)
}

func (c *virtualMachineTemplateController) EnqueueAfter(name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), "", name, duration)
}

func (c *virtualMachineTemplateController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *virtualMachineTemplateController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *virtualMachineTemplateController) Cache() VirtualMachineTemplateCache {
	return &virtualMachineTemplateCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *virtualMachineTemplateController) Create(obj *v1.VirtualMachineTemplate) (*v1.VirtualMachineTemplate, error) {
	return c.clientGetter.VirtualMachineTemplates().Create(obj)
}

func (c *virtualMachineTemplateController) Update(obj *v1.VirtualMachineTemplate) (*v1.VirtualMachineTemplate, error) {
	return c.clientGetter.VirtualMachineTemplates().Update(obj)
}

func (c *virtualMachineTemplateController) Delete(name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.VirtualMachineTemplates().Delete(name, options)
}

func (c *virtualMachineTemplateController) Get(name string, options metav1.GetOptions) (*v1.VirtualMachineTemplate, error) {
	return c.clientGetter.VirtualMachineTemplates().Get(name, options)
}

func (c *virtualMachineTemplateController) List(opts metav1.ListOptions) (*v1.VirtualMachineTemplateList, error) {
	return c.clientGetter.VirtualMachineTemplates().List(opts)
}

func (c *virtualMachineTemplateController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.VirtualMachineTemplates().Watch(opts)
}

func (c *virtualMachineTemplateController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.VirtualMachineTemplate, err error) {
	return c.clientGetter.VirtualMachineTemplates().Patch(name, pt, data, subresources...)
}

type virtualMachineTemplateCache struct {
	lister  listers.VirtualMachineTemplateLister
	indexer cache.Indexer
}

func (c *virtualMachineTemplateCache) Get(name string) (*v1.VirtualMachineTemplate, error) {
	return c.lister.Get(name)
}

func (c *virtualMachineTemplateCache) List(selector labels.Selector) ([]*v1.VirtualMachineTemplate, error) {
	return c.lister.List(selector)
}

func (c *virtualMachineTemplateCache) AddIndexer(indexName string, indexer VirtualMachineTemplateIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.VirtualMachineTemplate))
		},
	}))
}

func (c *virtualMachineTemplateCache) GetByIndex(indexName, key string) (result []*v1.VirtualMachineTemplate, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1.VirtualMachineTemplate))
	}
	return result, nil
}
