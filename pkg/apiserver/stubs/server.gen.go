// Package apiserver provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package apiserver

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"strings"
)

// Course defines model for course.
type Course struct {
	Name *string `json:"name,omitempty"`
	Spec *struct {
		Description       *string   `json:"description,omitempty"`
		Id                *string   `json:"id,omitempty"`
		KeepaliveDuration *string   `json:"keepalive_duration,omitempty"`
		Name              *string   `json:"name,omitempty"`
		PauseDuration     *string   `json:"pause_duration,omitempty"`
		Pauseable         *bool     `json:"pauseable,omitempty"`
		Scenarios         *[]string `json:"scenarios,omitempty"`
		Virtualmachines   *[]struct {
			AdditionalProperties map[string]string `json:"-"`
		} `json:"virtualmachines,omitempty"`
	} `json:"spec,omitempty"`
}

// Error defines model for error.
type Error struct {
	Message *string `json:"message,omitempty"`
	Status  *int    `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Virtualmachine defines model for virtualmachine.
type Virtualmachine struct {
	Name *string `json:"name,omitempty"`
	Spec *struct {
		Id           *string `json:"id,omitempty"`
		KeypairName  *string `json:"keypair_name,omitempty"`
		Provision    *bool   `json:"provision,omitempty"`
		User         *string `json:"user,omitempty"`
		VmClaimId    *string `json:"vm_claim_id,omitempty"`
		VmSetId      *string `json:"vm_set_id,omitempty"`
		VmTemplateId *string `json:"vm_template_id,omitempty"`
	} `json:"spec,omitempty"`
	Status *struct {
		Allocated     *bool     `json:"allocated,omitempty"`
		EnvironmentId *string   `json:"environment_id,omitempty"`
		Hostname      *string   `json:"hostname,omitempty"`
		PrivateIp     *string   `json:"private_ip,omitempty"`
		PublicIp      *string   `json:"public_ip,omitempty"`
		Status        *Vmstatus `json:"status,omitempty"`
		Tainted       *bool     `json:"tainted,omitempty"`
		Tfstate       *string   `json:"tfstate,omitempty"`
		WsEndpoint    *string   `json:"ws_endpoint,omitempty"`
	} `json:"status,omitempty"`
}

// Vmstatus defines model for vmstatus.
type Vmstatus string

// List of Vmstatus
const (
	Vmstatus_provisioned          Vmstatus = "provisioned"
	Vmstatus_readyforprovisioning Vmstatus = "readyforprovisioning"
	Vmstatus_running              Vmstatus = "running"
	Vmstatus_terminating          Vmstatus = "terminating"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /courses)
	GetCourses(ctx echo.Context) error

	// (GET /virtualmachines)
	GetVirtualmachines(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCourses converts echo context to params.
func (w *ServerInterfaceWrapper) GetCourses(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCourses(ctx)
	return err
}

// GetVirtualmachines converts echo context to params.
func (w *ServerInterfaceWrapper) GetVirtualmachines(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVirtualmachines(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/courses", wrapper.GetCourses)
	router.GET("/virtualmachines", wrapper.GetVirtualmachines)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6RVTWvbQBD9K2bbo4mdtifd0kLTUGgDhV5CMOPVWJ5U+8HsSMUE//eyKxFZ0cpJyU2a",
	"fTPz5mPfPirtjHcWrQRVPKqg92ggfWrXcMD45dl5ZCFMdgsmWeXgURUqCJOt1HGpgkc9hZcYNJMXcjbr",
	"RWXW/AfRQ00tbsqGYdZ7loyHJrzgmyCwrU8DbJ2rEWwqR6MFJpeqIEETslF6AzDDIf63xNJAbUDvyeLY",
	"GcqSIh2ob0c9mgvqtg+oZZplisj5ILPj6UAMhgDVzAgFpDmlRFawQh4oTJxymcc9ePMKza7IwQPxZn4H",
	"2LUUxuM/GXATkLN+rdnoGshsZhK3ZhNQzpwKGl+DYB6S69jQ+HHpUNdOg2CZLwFtS+ysQTtLZ++CnOkQ",
	"tYmnzx8325r03OnA+T3jThXq3WoQk1WvJKvW9LhYNsR9mqlFdhGY5/k3bNCW3pGVVzU0u5RmIIy2Maq4",
	"U4xQHnaOnzYlxjtZHCzVUnFje7sgG7Ig8e9+maERUDdMcvgVi+8m+BmBka9KQ/ZJYFPlya6eouxFfKTZ",
	"4xvZvwIec5LduYnQqqvbm8XO8QK0xhDIVguw5cKAhSr+fHPb7eErsFkwBtewxhBjk0Q1VMPpNXAFVhpQ",
	"S9Uid5dJXV6sL9aRrPNowZMq1MdkiqIq+1T3qns/0neFaWxxsZMc35SqUNcoX3rIUjEG72wP/7Bedw+Q",
	"FewGDt7XpJPv6iG4oZMw0tdze9g/Z1MtPS6fte7n94j6tL78LxLncndKnEn1w8kijhqtUHfNT7dIFXeP",
	"o324uz/eR8Aq88jM9fj3M+gbe332qo9lf6a1Lxd4PP4LAAD//wm+N7OXCAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

// SecurityMiddleware authenticates incoming requests against the specified provider
type SecurityMiddleware func(ctx echo.Context, provider string, scopes []string) error

// secureServer is a small wrapper around an ServerInterface to ensure security through a centralised security middleware
type secureServer struct {
	ServerInterface

	secure SecurityMiddleware
}

func NewSecureServer(srv ServerInterface, securityLayer SecurityMiddleware) ServerInterface {
	return &secureServer{
		ServerInterface: srv,
		secure:          securityLayer,
	}
}

// (GET /courses)
func (s *secureServer) GetCourses(ctx echo.Context) error {
	if err := s.secure(ctx, "BearerAuth", nil); err != nil {
		return err
	}
	return s.ServerInterface.GetCourses(ctx)
}

// (GET /virtualmachines)
func (s *secureServer) GetVirtualmachines(ctx echo.Context) error {
	if err := s.secure(ctx, "BearerAuth", nil); err != nil {
		return err
	}
	return s.ServerInterface.GetVirtualmachines(ctx)
}
