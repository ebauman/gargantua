// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: hobbyfarm/hobbyfarm.proto

package protobuf

import (
	_ "github.com/ebauman/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type VMStatus int32

const (
	VMStatus_RFP         VMStatus = 0
	VMStatus_Provisioned VMStatus = 1
	VMStatus_Running     VMStatus = 2
	VMStatus_Terminating VMStatus = 3
)

// Enum value maps for VMStatus.
var (
	VMStatus_name = map[int32]string{
		0: "RFP",
		1: "Provisioned",
		2: "Running",
		3: "Terminating",
	}
	VMStatus_value = map[string]int32{
		"RFP":         0,
		"Provisioned": 1,
		"Running":     2,
		"Terminating": 3,
	}
)

func (x VMStatus) Enum() *VMStatus {
	p := new(VMStatus)
	*p = x
	return p
}

func (x VMStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VMStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_hobbyfarm_hobbyfarm_proto_enumTypes[0].Descriptor()
}

func (VMStatus) Type() protoreflect.EnumType {
	return &file_hobbyfarm_hobbyfarm_proto_enumTypes[0]
}

func (x VMStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VMStatus.Descriptor instead.
func (VMStatus) EnumDescriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{0}
}

type CapacityMode int32

const (
	CapacityMode_Raw   CapacityMode = 0
	CapacityMode_Count CapacityMode = 1
)

// Enum value maps for CapacityMode.
var (
	CapacityMode_name = map[int32]string{
		0: "Raw",
		1: "Count",
	}
	CapacityMode_value = map[string]int32{
		"Raw":   0,
		"Count": 1,
	}
)

func (x CapacityMode) Enum() *CapacityMode {
	p := new(CapacityMode)
	*p = x
	return p
}

func (x CapacityMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CapacityMode) Descriptor() protoreflect.EnumDescriptor {
	return file_hobbyfarm_hobbyfarm_proto_enumTypes[1].Descriptor()
}

func (CapacityMode) Type() protoreflect.EnumType {
	return &file_hobbyfarm_hobbyfarm_proto_enumTypes[1]
}

func (x CapacityMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CapacityMode.Descriptor instead.
func (CapacityMode) EnumDescriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{1}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{0}
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{1}
}

func (x *Status) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type StringMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map map[string]string `protobuf:"bytes,1,rep,name=Map,proto3" json:"Map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StringMap) Reset() {
	*x = StringMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringMap) ProtoMessage() {}

func (x *StringMap) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringMap.ProtoReflect.Descriptor instead.
func (*StringMap) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{2}
}

func (x *StringMap) GetMap() map[string]string {
	if x != nil {
		return x.Map
	}
	return nil
}

type Int32Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map map[string]int32 `protobuf:"bytes,1,rep,name=Map,proto3" json:"Map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Int32Map) Reset() {
	*x = Int32Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32Map) ProtoMessage() {}

func (x *Int32Map) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32Map.ProtoReflect.Descriptor instead.
func (*Int32Map) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{3}
}

func (x *Int32Map) GetMap() map[string]int32 {
	if x != nil {
		return x.Map
	}
	return nil
}

type ID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ID) Reset() {
	*x = ID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ID) ProtoMessage() {}

func (x *ID) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ID.ProtoReflect.Descriptor instead.
func (*ID) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{4}
}

func (x *ID) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type VirtualMachine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string                `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Spec   *VirtualMachineSpec   `protobuf:"bytes,2,opt,name=Spec,proto3" json:"Spec,omitempty"`
	Status *VirtualMachineStatus `protobuf:"bytes,3,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *VirtualMachine) Reset() {
	*x = VirtualMachine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachine) ProtoMessage() {}

func (x *VirtualMachine) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachine.ProtoReflect.Descriptor instead.
func (*VirtualMachine) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{5}
}

func (x *VirtualMachine) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualMachine) GetSpec() *VirtualMachineSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *VirtualMachine) GetStatus() *VirtualMachineStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type VirtualMachineSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	VirtualMachineTemplateId string `protobuf:"bytes,2,opt,name=VirtualMachineTemplateId,proto3" json:"VirtualMachineTemplateId,omitempty"`
	KeyPair                  string `protobuf:"bytes,3,opt,name=KeyPair,proto3" json:"KeyPair,omitempty"`
	VirtualMachineClaimId    string `protobuf:"bytes,4,opt,name=VirtualMachineClaimId,proto3" json:"VirtualMachineClaimId,omitempty"`
	UserId                   string `protobuf:"bytes,5,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Provision                bool   `protobuf:"varint,6,opt,name=Provision,proto3" json:"Provision,omitempty"`
	VirtualMachineSetId      string `protobuf:"bytes,7,opt,name=VirtualMachineSetId,proto3" json:"VirtualMachineSetId,omitempty"`
}

func (x *VirtualMachineSpec) Reset() {
	*x = VirtualMachineSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineSpec) ProtoMessage() {}

func (x *VirtualMachineSpec) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineSpec.ProtoReflect.Descriptor instead.
func (*VirtualMachineSpec) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{6}
}

func (x *VirtualMachineSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VirtualMachineSpec) GetVirtualMachineTemplateId() string {
	if x != nil {
		return x.VirtualMachineTemplateId
	}
	return ""
}

func (x *VirtualMachineSpec) GetKeyPair() string {
	if x != nil {
		return x.KeyPair
	}
	return ""
}

func (x *VirtualMachineSpec) GetVirtualMachineClaimId() string {
	if x != nil {
		return x.VirtualMachineClaimId
	}
	return ""
}

func (x *VirtualMachineSpec) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *VirtualMachineSpec) GetProvision() bool {
	if x != nil {
		return x.Provision
	}
	return false
}

func (x *VirtualMachineSpec) GetVirtualMachineSetId() string {
	if x != nil {
		return x.VirtualMachineSetId
	}
	return ""
}

type VirtualMachineStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        VMStatus `protobuf:"varint,1,opt,name=Status,proto3,enum=VMStatus" json:"Status,omitempty"`
	Allocated     bool     `protobuf:"varint,2,opt,name=Allocated,proto3" json:"Allocated,omitempty"`
	Tainted       bool     `protobuf:"varint,3,opt,name=Tainted,proto3" json:"Tainted,omitempty"`
	PublicIP      string   `protobuf:"bytes,4,opt,name=PublicIP,proto3" json:"PublicIP,omitempty"`
	PrivateIP     string   `protobuf:"bytes,5,opt,name=PrivateIP,proto3" json:"PrivateIP,omitempty"`
	EnvironmentId string   `protobuf:"bytes,6,opt,name=EnvironmentId,proto3" json:"EnvironmentId,omitempty"`
	Hostname      string   `protobuf:"bytes,7,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	TFState       string   `protobuf:"bytes,8,opt,name=TFState,proto3" json:"TFState,omitempty"`
	WsEndpoint    string   `protobuf:"bytes,9,opt,name=WsEndpoint,proto3" json:"WsEndpoint,omitempty"`
}

func (x *VirtualMachineStatus) Reset() {
	*x = VirtualMachineStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineStatus) ProtoMessage() {}

func (x *VirtualMachineStatus) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineStatus.ProtoReflect.Descriptor instead.
func (*VirtualMachineStatus) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{7}
}

func (x *VirtualMachineStatus) GetStatus() VMStatus {
	if x != nil {
		return x.Status
	}
	return VMStatus_RFP
}

func (x *VirtualMachineStatus) GetAllocated() bool {
	if x != nil {
		return x.Allocated
	}
	return false
}

func (x *VirtualMachineStatus) GetTainted() bool {
	if x != nil {
		return x.Tainted
	}
	return false
}

func (x *VirtualMachineStatus) GetPublicIP() string {
	if x != nil {
		return x.PublicIP
	}
	return ""
}

func (x *VirtualMachineStatus) GetPrivateIP() string {
	if x != nil {
		return x.PrivateIP
	}
	return ""
}

func (x *VirtualMachineStatus) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *VirtualMachineStatus) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *VirtualMachineStatus) GetTFState() string {
	if x != nil {
		return x.TFState
	}
	return ""
}

func (x *VirtualMachineStatus) GetWsEndpoint() string {
	if x != nil {
		return x.WsEndpoint
	}
	return ""
}

type VirtualMachineClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string                     `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Spec   *VirtualMachineClaimSpec   `protobuf:"bytes,2,opt,name=Spec,proto3" json:"Spec,omitempty"`
	Status *VirtualMachineClaimStatus `protobuf:"bytes,3,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *VirtualMachineClaim) Reset() {
	*x = VirtualMachineClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineClaim) ProtoMessage() {}

func (x *VirtualMachineClaim) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineClaim.ProtoReflect.Descriptor instead.
func (*VirtualMachineClaim) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{8}
}

func (x *VirtualMachineClaim) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualMachineClaim) GetSpec() *VirtualMachineClaimSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *VirtualMachineClaim) GetStatus() *VirtualMachineClaimStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type VirtualMachineClaimSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string                            `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UserId              string                            `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	RestrictedBind      bool                              `protobuf:"varint,3,opt,name=RestrictedBind,proto3" json:"RestrictedBind,omitempty"`
	RestrictedBindValue string                            `protobuf:"bytes,4,opt,name=RestrictedBindValue,proto3" json:"RestrictedBindValue,omitempty"`
	VirtualMachines     map[string]*VirtualMachineClaimVM `protobuf:"bytes,5,rep,name=VirtualMachines,proto3" json:"VirtualMachines,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DynamicCapable      bool                              `protobuf:"varint,6,opt,name=DynamicCapable,proto3" json:"DynamicCapable,omitempty"`
}

func (x *VirtualMachineClaimSpec) Reset() {
	*x = VirtualMachineClaimSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineClaimSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineClaimSpec) ProtoMessage() {}

func (x *VirtualMachineClaimSpec) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineClaimSpec.ProtoReflect.Descriptor instead.
func (*VirtualMachineClaimSpec) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{9}
}

func (x *VirtualMachineClaimSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VirtualMachineClaimSpec) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *VirtualMachineClaimSpec) GetRestrictedBind() bool {
	if x != nil {
		return x.RestrictedBind
	}
	return false
}

func (x *VirtualMachineClaimSpec) GetRestrictedBindValue() string {
	if x != nil {
		return x.RestrictedBindValue
	}
	return ""
}

func (x *VirtualMachineClaimSpec) GetVirtualMachines() map[string]*VirtualMachineClaimVM {
	if x != nil {
		return x.VirtualMachines
	}
	return nil
}

func (x *VirtualMachineClaimSpec) GetDynamicCapable() bool {
	if x != nil {
		return x.DynamicCapable
	}
	return false
}

type VirtualMachineClaimStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindMode             string `protobuf:"bytes,1,opt,name=BindMode,proto3" json:"BindMode,omitempty"`
	StaticBindAttempts   int32  `protobuf:"varint,2,opt,name=StaticBindAttempts,proto3" json:"StaticBindAttempts,omitempty"`
	DynamicBindRequestId string `protobuf:"bytes,3,opt,name=DynamicBindRequestId,proto3" json:"DynamicBindRequestId,omitempty"`
	Bound                bool   `protobuf:"varint,4,opt,name=Bound,proto3" json:"Bound,omitempty"`
	Ready                bool   `protobuf:"varint,5,opt,name=Ready,proto3" json:"Ready,omitempty"`
	Tainted              bool   `protobuf:"varint,6,opt,name=Tainted,proto3" json:"Tainted,omitempty"`
}

func (x *VirtualMachineClaimStatus) Reset() {
	*x = VirtualMachineClaimStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineClaimStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineClaimStatus) ProtoMessage() {}

func (x *VirtualMachineClaimStatus) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineClaimStatus.ProtoReflect.Descriptor instead.
func (*VirtualMachineClaimStatus) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{10}
}

func (x *VirtualMachineClaimStatus) GetBindMode() string {
	if x != nil {
		return x.BindMode
	}
	return ""
}

func (x *VirtualMachineClaimStatus) GetStaticBindAttempts() int32 {
	if x != nil {
		return x.StaticBindAttempts
	}
	return 0
}

func (x *VirtualMachineClaimStatus) GetDynamicBindRequestId() string {
	if x != nil {
		return x.DynamicBindRequestId
	}
	return ""
}

func (x *VirtualMachineClaimStatus) GetBound() bool {
	if x != nil {
		return x.Bound
	}
	return false
}

func (x *VirtualMachineClaimStatus) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *VirtualMachineClaimStatus) GetTainted() bool {
	if x != nil {
		return x.Tainted
	}
	return false
}

type VirtualMachineClaimVM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template         string `protobuf:"bytes,1,opt,name=Template,proto3" json:"Template,omitempty"`
	VirtualMachineId string `protobuf:"bytes,2,opt,name=VirtualMachineId,proto3" json:"VirtualMachineId,omitempty"`
}

func (x *VirtualMachineClaimVM) Reset() {
	*x = VirtualMachineClaimVM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineClaimVM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineClaimVM) ProtoMessage() {}

func (x *VirtualMachineClaimVM) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineClaimVM.ProtoReflect.Descriptor instead.
func (*VirtualMachineClaimVM) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{11}
}

func (x *VirtualMachineClaimVM) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *VirtualMachineClaimVM) GetVirtualMachineId() string {
	if x != nil {
		return x.VirtualMachineId
	}
	return ""
}

type VirtualMachineTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string                      `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Spec *VirtualMachineTemplateSpec `protobuf:"bytes,2,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *VirtualMachineTemplate) Reset() {
	*x = VirtualMachineTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineTemplate) ProtoMessage() {}

func (x *VirtualMachineTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineTemplate.ProtoReflect.Descriptor instead.
func (*VirtualMachineTemplate) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{12}
}

func (x *VirtualMachineTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualMachineTemplate) GetSpec() *VirtualMachineTemplateSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type VirtualMachineTemplateSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string            `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name      string            `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Image     string            `protobuf:"bytes,3,opt,name=Image,proto3" json:"Image,omitempty"`
	Resources *CMSStruct        `protobuf:"bytes,4,opt,name=Resources,proto3" json:"Resources,omitempty"`
	CountMap  map[string]string `protobuf:"bytes,5,rep,name=CountMap,proto3" json:"CountMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VirtualMachineTemplateSpec) Reset() {
	*x = VirtualMachineTemplateSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineTemplateSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineTemplateSpec) ProtoMessage() {}

func (x *VirtualMachineTemplateSpec) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineTemplateSpec.ProtoReflect.Descriptor instead.
func (*VirtualMachineTemplateSpec) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{13}
}

func (x *VirtualMachineTemplateSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VirtualMachineTemplateSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualMachineTemplateSpec) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *VirtualMachineTemplateSpec) GetResources() *CMSStruct {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *VirtualMachineTemplateSpec) GetCountMap() map[string]string {
	if x != nil {
		return x.CountMap
	}
	return nil
}

type CMSStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CPU     int32 `protobuf:"varint,1,opt,name=CPU,proto3" json:"CPU,omitempty"`
	Memory  int32 `protobuf:"varint,2,opt,name=Memory,proto3" json:"Memory,omitempty"`
	Storage int32 `protobuf:"varint,3,opt,name=Storage,proto3" json:"Storage,omitempty"`
}

func (x *CMSStruct) Reset() {
	*x = CMSStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMSStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMSStruct) ProtoMessage() {}

func (x *CMSStruct) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMSStruct.ProtoReflect.Descriptor instead.
func (*CMSStruct) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{14}
}

func (x *CMSStruct) GetCPU() int32 {
	if x != nil {
		return x.CPU
	}
	return 0
}

func (x *CMSStruct) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *CMSStruct) GetStorage() int32 {
	if x != nil {
		return x.Storage
	}
	return 0
}

type Environment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string             `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Spec   *EnvironmentSpec   `protobuf:"bytes,2,opt,name=Spec,proto3" json:"Spec,omitempty"`
	Status *EnvironmentStatus `protobuf:"bytes,3,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *Environment) Reset() {
	*x = Environment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Environment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Environment) ProtoMessage() {}

func (x *Environment) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Environment.ProtoReflect.Descriptor instead.
func (*Environment) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{15}
}

func (x *Environment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Environment) GetSpec() *EnvironmentSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Environment) GetStatus() *EnvironmentStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type EnvironmentSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName          string                `protobuf:"bytes,1,opt,name=DisplayName,proto3" json:"DisplayName,omitempty"`
	DNSSuffix            string                `protobuf:"bytes,2,opt,name=DNSSuffix,proto3" json:"DNSSuffix,omitempty"`
	Provider             string                `protobuf:"bytes,3,opt,name=Provider,proto3" json:"Provider,omitempty"`
	TemplateMapping      map[string]*StringMap `protobuf:"bytes,4,rep,name=TemplateMapping,proto3" json:"TemplateMapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EnvironmentSpecifics map[string]string     `protobuf:"bytes,5,rep,name=EnvironmentSpecifics,proto3" json:"EnvironmentSpecifics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IPTranslationMap     map[string]string     `protobuf:"bytes,6,rep,name=IPTranslationMap,proto3" json:"IPTranslationMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WsEndpoint           string                `protobuf:"bytes,7,opt,name=WsEndpoint,proto3" json:"WsEndpoint,omitempty"`
	CapacityMode         CapacityMode          `protobuf:"varint,8,opt,name=CapacityMode,proto3,enum=CapacityMode" json:"CapacityMode,omitempty"`
	BurstCapable         bool                  `protobuf:"varint,9,opt,name=BurstCapable,proto3" json:"BurstCapable,omitempty"`
	CountCapacity        map[string]int32      `protobuf:"bytes,10,rep,name=CountCapacity,proto3" json:"CountCapacity,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Capacity             *CMSStruct            `protobuf:"bytes,11,opt,name=Capacity,proto3" json:"Capacity,omitempty"`
	BurstCountCapacity   map[string]int32      `protobuf:"bytes,12,rep,name=BurstCountCapacity,proto3" json:"BurstCountCapacity,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	BurstCapacity        *CMSStruct            `protobuf:"bytes,13,opt,name=BurstCapacity,proto3" json:"BurstCapacity,omitempty"`
}

func (x *EnvironmentSpec) Reset() {
	*x = EnvironmentSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentSpec) ProtoMessage() {}

func (x *EnvironmentSpec) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentSpec.ProtoReflect.Descriptor instead.
func (*EnvironmentSpec) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{16}
}

func (x *EnvironmentSpec) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *EnvironmentSpec) GetDNSSuffix() string {
	if x != nil {
		return x.DNSSuffix
	}
	return ""
}

func (x *EnvironmentSpec) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *EnvironmentSpec) GetTemplateMapping() map[string]*StringMap {
	if x != nil {
		return x.TemplateMapping
	}
	return nil
}

func (x *EnvironmentSpec) GetEnvironmentSpecifics() map[string]string {
	if x != nil {
		return x.EnvironmentSpecifics
	}
	return nil
}

func (x *EnvironmentSpec) GetIPTranslationMap() map[string]string {
	if x != nil {
		return x.IPTranslationMap
	}
	return nil
}

func (x *EnvironmentSpec) GetWsEndpoint() string {
	if x != nil {
		return x.WsEndpoint
	}
	return ""
}

func (x *EnvironmentSpec) GetCapacityMode() CapacityMode {
	if x != nil {
		return x.CapacityMode
	}
	return CapacityMode_Raw
}

func (x *EnvironmentSpec) GetBurstCapable() bool {
	if x != nil {
		return x.BurstCapable
	}
	return false
}

func (x *EnvironmentSpec) GetCountCapacity() map[string]int32 {
	if x != nil {
		return x.CountCapacity
	}
	return nil
}

func (x *EnvironmentSpec) GetCapacity() *CMSStruct {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *EnvironmentSpec) GetBurstCountCapacity() map[string]int32 {
	if x != nil {
		return x.BurstCountCapacity
	}
	return nil
}

func (x *EnvironmentSpec) GetBurstCapacity() *CMSStruct {
	if x != nil {
		return x.BurstCapacity
	}
	return nil
}

type EnvironmentStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Used           *CMSStruct       `protobuf:"bytes,1,opt,name=Used,proto3" json:"Used,omitempty"`
	AvailableCount map[string]int32 `protobuf:"bytes,2,rep,name=AvailableCount,proto3" json:"AvailableCount,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *EnvironmentStatus) Reset() {
	*x = EnvironmentStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentStatus) ProtoMessage() {}

func (x *EnvironmentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentStatus.ProtoReflect.Descriptor instead.
func (*EnvironmentStatus) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{17}
}

func (x *EnvironmentStatus) GetUsed() *CMSStruct {
	if x != nil {
		return x.Used
	}
	return nil
}

func (x *EnvironmentStatus) GetAvailableCount() map[string]int32 {
	if x != nil {
		return x.AvailableCount
	}
	return nil
}

type VirtualMachineSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string                   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Spec   *VirtualMachineSetSpec   `protobuf:"bytes,2,opt,name=Spec,proto3" json:"Spec,omitempty"`
	Status *VirtualMachineSetStatus `protobuf:"bytes,3,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *VirtualMachineSet) Reset() {
	*x = VirtualMachineSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineSet) ProtoMessage() {}

func (x *VirtualMachineSet) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineSet.ProtoReflect.Descriptor instead.
func (*VirtualMachineSet) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{18}
}

func (x *VirtualMachineSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualMachineSet) GetSpec() *VirtualMachineSetSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *VirtualMachineSet) GetStatus() *VirtualMachineSetStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type VirtualMachineSetSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count               int32  `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	Environment         string `protobuf:"bytes,2,opt,name=Environment,proto3" json:"Environment,omitempty"`
	VMTemplate          string `protobuf:"bytes,3,opt,name=VMTemplate,proto3" json:"VMTemplate,omitempty"`
	BaseName            string `protobuf:"bytes,4,opt,name=BaseName,proto3" json:"BaseName,omitempty"`
	RestrictedBind      bool   `protobuf:"varint,5,opt,name=RestrictedBind,proto3" json:"RestrictedBind,omitempty"`
	RestrictedBindValue string `protobuf:"bytes,6,opt,name=RestrictedBindValue,proto3" json:"RestrictedBindValue,omitempty"`
}

func (x *VirtualMachineSetSpec) Reset() {
	*x = VirtualMachineSetSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineSetSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineSetSpec) ProtoMessage() {}

func (x *VirtualMachineSetSpec) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineSetSpec.ProtoReflect.Descriptor instead.
func (*VirtualMachineSetSpec) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{19}
}

func (x *VirtualMachineSetSpec) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *VirtualMachineSetSpec) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *VirtualMachineSetSpec) GetVMTemplate() string {
	if x != nil {
		return x.VMTemplate
	}
	return ""
}

func (x *VirtualMachineSetSpec) GetBaseName() string {
	if x != nil {
		return x.BaseName
	}
	return ""
}

func (x *VirtualMachineSetSpec) GetRestrictedBind() bool {
	if x != nil {
		return x.RestrictedBind
	}
	return false
}

func (x *VirtualMachineSetSpec) GetRestrictedBindValue() string {
	if x != nil {
		return x.RestrictedBindValue
	}
	return ""
}

type VirtualMachineSetStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Machines         []*VirtualMachineProvision `protobuf:"bytes,1,rep,name=Machines,proto3" json:"Machines,omitempty"`
	AvailableCount   int32                      `protobuf:"varint,2,opt,name=AvailableCount,proto3" json:"AvailableCount,omitempty"`
	ProvisionedCount int32                      `protobuf:"varint,3,opt,name=ProvisionedCount,proto3" json:"ProvisionedCount,omitempty"`
}

func (x *VirtualMachineSetStatus) Reset() {
	*x = VirtualMachineSetStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineSetStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineSetStatus) ProtoMessage() {}

func (x *VirtualMachineSetStatus) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineSetStatus.ProtoReflect.Descriptor instead.
func (*VirtualMachineSetStatus) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{20}
}

func (x *VirtualMachineSetStatus) GetMachines() []*VirtualMachineProvision {
	if x != nil {
		return x.Machines
	}
	return nil
}

func (x *VirtualMachineSetStatus) GetAvailableCount() int32 {
	if x != nil {
		return x.AvailableCount
	}
	return 0
}

func (x *VirtualMachineSetStatus) GetProvisionedCount() int32 {
	if x != nil {
		return x.ProvisionedCount
	}
	return 0
}

type VirtualMachineProvision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualMachineName string `protobuf:"bytes,1,opt,name=VirtualMachineName,proto3" json:"VirtualMachineName,omitempty"`
	TFControllerState  string `protobuf:"bytes,2,opt,name=TFControllerState,proto3" json:"TFControllerState,omitempty"`
	TFControllerCM     string `protobuf:"bytes,3,opt,name=TFControllerCM,proto3" json:"TFControllerCM,omitempty"`
}

func (x *VirtualMachineProvision) Reset() {
	*x = VirtualMachineProvision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineProvision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineProvision) ProtoMessage() {}

func (x *VirtualMachineProvision) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineProvision.ProtoReflect.Descriptor instead.
func (*VirtualMachineProvision) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{21}
}

func (x *VirtualMachineProvision) GetVirtualMachineName() string {
	if x != nil {
		return x.VirtualMachineName
	}
	return ""
}

func (x *VirtualMachineProvision) GetTFControllerState() string {
	if x != nil {
		return x.TFControllerState
	}
	return ""
}

func (x *VirtualMachineProvision) GetTFControllerCM() string {
	if x != nil {
		return x.TFControllerCM
	}
	return ""
}

type Course struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string      `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Spec *CourseSpec `protobuf:"bytes,2,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *Course) Reset() {
	*x = Course{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Course) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Course) ProtoMessage() {}

func (x *Course) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Course.ProtoReflect.Descriptor instead.
func (*Course) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{22}
}

func (x *Course) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Course) GetSpec() *CourseSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type CourseSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string       `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name              string       `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description       string       `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Scenarios         []string     `protobuf:"bytes,4,rep,name=Scenarios,proto3" json:"Scenarios,omitempty"`
	VirtualMachines   []*StringMap `protobuf:"bytes,5,rep,name=VirtualMachines,proto3" json:"VirtualMachines,omitempty"`
	KeepAliveDuration string       `protobuf:"bytes,6,opt,name=KeepAliveDuration,proto3" json:"KeepAliveDuration,omitempty"`
	PauseDuration     string       `protobuf:"bytes,7,opt,name=PauseDuration,proto3" json:"PauseDuration,omitempty"`
	Pauseable         bool         `protobuf:"varint,8,opt,name=Pauseable,proto3" json:"Pauseable,omitempty"`
}

func (x *CourseSpec) Reset() {
	*x = CourseSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourseSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourseSpec) ProtoMessage() {}

func (x *CourseSpec) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourseSpec.ProtoReflect.Descriptor instead.
func (*CourseSpec) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{23}
}

func (x *CourseSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CourseSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CourseSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CourseSpec) GetScenarios() []string {
	if x != nil {
		return x.Scenarios
	}
	return nil
}

func (x *CourseSpec) GetVirtualMachines() []*StringMap {
	if x != nil {
		return x.VirtualMachines
	}
	return nil
}

func (x *CourseSpec) GetKeepAliveDuration() string {
	if x != nil {
		return x.KeepAliveDuration
	}
	return ""
}

func (x *CourseSpec) GetPauseDuration() string {
	if x != nil {
		return x.PauseDuration
	}
	return ""
}

func (x *CourseSpec) GetPauseable() bool {
	if x != nil {
		return x.Pauseable
	}
	return false
}

type Scenario struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string        `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Spec *ScenarioSpec `protobuf:"bytes,2,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *Scenario) Reset() {
	*x = Scenario{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scenario) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scenario) ProtoMessage() {}

func (x *Scenario) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scenario.ProtoReflect.Descriptor instead.
func (*Scenario) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{24}
}

func (x *Scenario) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Scenario) GetSpec() *ScenarioSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type ScenarioSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string          `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name              string          `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description       string          `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Steps             []*ScenarioStep `protobuf:"bytes,4,rep,name=Steps,proto3" json:"Steps,omitempty"`
	VirtualMachines   []*StringMap    `protobuf:"bytes,5,rep,name=VirtualMachines,proto3" json:"VirtualMachines,omitempty"`
	KeepAliveDuration string          `protobuf:"bytes,6,opt,name=KeepAliveDuration,proto3" json:"KeepAliveDuration,omitempty"`
	PauseDuration     string          `protobuf:"bytes,7,opt,name=PauseDuration,proto3" json:"PauseDuration,omitempty"`
	Pauseable         bool            `protobuf:"varint,8,opt,name=Pauseable,proto3" json:"Pauseable,omitempty"`
}

func (x *ScenarioSpec) Reset() {
	*x = ScenarioSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenarioSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenarioSpec) ProtoMessage() {}

func (x *ScenarioSpec) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenarioSpec.ProtoReflect.Descriptor instead.
func (*ScenarioSpec) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{25}
}

func (x *ScenarioSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ScenarioSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScenarioSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScenarioSpec) GetSteps() []*ScenarioStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *ScenarioSpec) GetVirtualMachines() []*StringMap {
	if x != nil {
		return x.VirtualMachines
	}
	return nil
}

func (x *ScenarioSpec) GetKeepAliveDuration() string {
	if x != nil {
		return x.KeepAliveDuration
	}
	return ""
}

func (x *ScenarioSpec) GetPauseDuration() string {
	if x != nil {
		return x.PauseDuration
	}
	return ""
}

func (x *ScenarioSpec) GetPauseable() bool {
	if x != nil {
		return x.Pauseable
	}
	return false
}

type ScenarioStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title   string `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *ScenarioStep) Reset() {
	*x = ScenarioStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenarioStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenarioStep) ProtoMessage() {}

func (x *ScenarioStep) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenarioStep.ProtoReflect.Descriptor instead.
func (*ScenarioStep) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{26}
}

func (x *ScenarioStep) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ScenarioStep) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string         `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Spec   *SessionSpec   `protobuf:"bytes,2,opt,name=Spec,proto3" json:"Spec,omitempty"`
	Status *SessionStatus `protobuf:"bytes,3,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{27}
}

func (x *Session) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Session) GetSpec() *SessionSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Session) GetStatus() *SessionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type SessionSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ScenarioId string   `protobuf:"bytes,2,opt,name=ScenarioId,proto3" json:"ScenarioId,omitempty"`
	CourseId   string   `protobuf:"bytes,3,opt,name=CourseId,proto3" json:"CourseId,omitempty"`
	UserId     string   `protobuf:"bytes,4,opt,name=UserId,proto3" json:"UserId,omitempty"`
	VmClaimSet []string `protobuf:"bytes,5,rep,name=VmClaimSet,proto3" json:"VmClaimSet,omitempty"`
	AccessCode string   `protobuf:"bytes,6,opt,name=AccessCode,proto3" json:"AccessCode,omitempty"`
}

func (x *SessionSpec) Reset() {
	*x = SessionSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionSpec) ProtoMessage() {}

func (x *SessionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionSpec.ProtoReflect.Descriptor instead.
func (*SessionSpec) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{28}
}

func (x *SessionSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SessionSpec) GetScenarioId() string {
	if x != nil {
		return x.ScenarioId
	}
	return ""
}

func (x *SessionSpec) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *SessionSpec) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SessionSpec) GetVmClaimSet() []string {
	if x != nil {
		return x.VmClaimSet
	}
	return nil
}

func (x *SessionSpec) GetAccessCode() string {
	if x != nil {
		return x.AccessCode
	}
	return ""
}

type SessionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paused         bool   `protobuf:"varint,1,opt,name=Paused,proto3" json:"Paused,omitempty"`
	PausedTime     string `protobuf:"bytes,2,opt,name=PausedTime,proto3" json:"PausedTime,omitempty"`
	Active         bool   `protobuf:"varint,3,opt,name=Active,proto3" json:"Active,omitempty"`
	Finished       bool   `protobuf:"varint,5,opt,name=Finished,proto3" json:"Finished,omitempty"`
	StartTime      string `protobuf:"bytes,6,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	ExpirationTime string `protobuf:"bytes,7,opt,name=ExpirationTime,proto3" json:"ExpirationTime,omitempty"`
}

func (x *SessionStatus) Reset() {
	*x = SessionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionStatus) ProtoMessage() {}

func (x *SessionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionStatus.ProtoReflect.Descriptor instead.
func (*SessionStatus) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{29}
}

func (x *SessionStatus) GetPaused() bool {
	if x != nil {
		return x.Paused
	}
	return false
}

func (x *SessionStatus) GetPausedTime() string {
	if x != nil {
		return x.PausedTime
	}
	return ""
}

func (x *SessionStatus) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *SessionStatus) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

func (x *SessionStatus) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *SessionStatus) GetExpirationTime() string {
	if x != nil {
		return x.ExpirationTime
	}
	return ""
}

type AccessCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string          `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Spec *AccessCodeSpec `protobuf:"bytes,2,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *AccessCode) Reset() {
	*x = AccessCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessCode) ProtoMessage() {}

func (x *AccessCode) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessCode.ProtoReflect.Descriptor instead.
func (*AccessCode) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{30}
}

func (x *AccessCode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccessCode) GetSpec() *AccessCodeSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type AccessCodeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code                string   `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Description         string   `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Scenarios           []string `protobuf:"bytes,3,rep,name=Scenarios,proto3" json:"Scenarios,omitempty"`
	Courses             []string `protobuf:"bytes,4,rep,name=Courses,proto3" json:"Courses,omitempty"`
	Expiration          string   `protobuf:"bytes,5,opt,name=Expiration,proto3" json:"Expiration,omitempty"`
	VirtualMachineSets  []string `protobuf:"bytes,6,rep,name=VirtualMachineSets,proto3" json:"VirtualMachineSets,omitempty"`
	RestrictedBind      bool     `protobuf:"varint,7,opt,name=RestrictedBind,proto3" json:"RestrictedBind,omitempty"`
	RestrictedBindValue string   `protobuf:"bytes,8,opt,name=RestrictedBindValue,proto3" json:"RestrictedBindValue,omitempty"`
}

func (x *AccessCodeSpec) Reset() {
	*x = AccessCodeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessCodeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessCodeSpec) ProtoMessage() {}

func (x *AccessCodeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessCodeSpec.ProtoReflect.Descriptor instead.
func (*AccessCodeSpec) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{31}
}

func (x *AccessCodeSpec) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AccessCodeSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AccessCodeSpec) GetScenarios() []string {
	if x != nil {
		return x.Scenarios
	}
	return nil
}

func (x *AccessCodeSpec) GetCourses() []string {
	if x != nil {
		return x.Courses
	}
	return nil
}

func (x *AccessCodeSpec) GetExpiration() string {
	if x != nil {
		return x.Expiration
	}
	return ""
}

func (x *AccessCodeSpec) GetVirtualMachineSets() []string {
	if x != nil {
		return x.VirtualMachineSets
	}
	return nil
}

func (x *AccessCodeSpec) GetRestrictedBind() bool {
	if x != nil {
		return x.RestrictedBind
	}
	return false
}

func (x *AccessCodeSpec) GetRestrictedBindValue() string {
	if x != nil {
		return x.RestrictedBindValue
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string    `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Spec *UserSpec `protobuf:"bytes,2,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{32}
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetSpec() *UserSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type UserSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Email       string   `protobuf:"bytes,2,opt,name=Email,proto3" json:"Email,omitempty"`
	Password    string   `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	AccessCodes []string `protobuf:"bytes,4,rep,name=AccessCodes,proto3" json:"AccessCodes,omitempty"`
	Admin       bool     `protobuf:"varint,5,opt,name=Admin,proto3" json:"Admin,omitempty"`
}

func (x *UserSpec) Reset() {
	*x = UserSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSpec) ProtoMessage() {}

func (x *UserSpec) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSpec.ProtoReflect.Descriptor instead.
func (*UserSpec) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{33}
}

func (x *UserSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserSpec) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserSpec) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserSpec) GetAccessCodes() []string {
	if x != nil {
		return x.AccessCodes
	}
	return nil
}

func (x *UserSpec) GetAdmin() bool {
	if x != nil {
		return x.Admin
	}
	return false
}

type ScheduledEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string                `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Spec   *ScheduledEventSpec   `protobuf:"bytes,2,opt,name=Spec,proto3" json:"Spec,omitempty"`
	Status *ScheduledEventStatus `protobuf:"bytes,3,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *ScheduledEvent) Reset() {
	*x = ScheduledEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledEvent) ProtoMessage() {}

func (x *ScheduledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledEvent.ProtoReflect.Descriptor instead.
func (*ScheduledEvent) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{34}
}

func (x *ScheduledEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScheduledEvent) GetSpec() *ScheduledEventSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ScheduledEvent) GetStatus() *ScheduledEventStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type ScheduledEventSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creator                 string               `protobuf:"bytes,1,opt,name=Creator,proto3" json:"Creator,omitempty"`
	Name                    string               `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description             string               `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	StartTime               string               `protobuf:"bytes,4,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime                 string               `protobuf:"bytes,5,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	RequiredVirtualMachines map[string]*Int32Map `protobuf:"bytes,6,rep,name=RequiredVirtualMachines,proto3" json:"RequiredVirtualMachines,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AccessCode              string               `protobuf:"bytes,7,opt,name=AccessCode,proto3" json:"AccessCode,omitempty"`
	RestrictedBind          bool                 `protobuf:"varint,8,opt,name=RestrictedBind,proto3" json:"RestrictedBind,omitempty"`
	RestrictedBindValue     string               `protobuf:"bytes,9,opt,name=RestrictedBindValue,proto3" json:"RestrictedBindValue,omitempty"`
	Scenarios               []string             `protobuf:"bytes,10,rep,name=Scenarios,proto3" json:"Scenarios,omitempty"`
	Courses                 []string             `protobuf:"bytes,11,rep,name=Courses,proto3" json:"Courses,omitempty"`
}

func (x *ScheduledEventSpec) Reset() {
	*x = ScheduledEventSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledEventSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledEventSpec) ProtoMessage() {}

func (x *ScheduledEventSpec) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledEventSpec.ProtoReflect.Descriptor instead.
func (*ScheduledEventSpec) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{35}
}

func (x *ScheduledEventSpec) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ScheduledEventSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScheduledEventSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScheduledEventSpec) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ScheduledEventSpec) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ScheduledEventSpec) GetRequiredVirtualMachines() map[string]*Int32Map {
	if x != nil {
		return x.RequiredVirtualMachines
	}
	return nil
}

func (x *ScheduledEventSpec) GetAccessCode() string {
	if x != nil {
		return x.AccessCode
	}
	return ""
}

func (x *ScheduledEventSpec) GetRestrictedBind() bool {
	if x != nil {
		return x.RestrictedBind
	}
	return false
}

func (x *ScheduledEventSpec) GetRestrictedBindValue() string {
	if x != nil {
		return x.RestrictedBindValue
	}
	return ""
}

func (x *ScheduledEventSpec) GetScenarios() []string {
	if x != nil {
		return x.Scenarios
	}
	return nil
}

func (x *ScheduledEventSpec) GetCourses() []string {
	if x != nil {
		return x.Courses
	}
	return nil
}

type ScheduledEventStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessCodeId       string   `protobuf:"bytes,1,opt,name=AccessCodeId,proto3" json:"AccessCodeId,omitempty"`
	VirtualMachineSets []string `protobuf:"bytes,2,rep,name=VirtualMachineSets,proto3" json:"VirtualMachineSets,omitempty"`
	Active             bool     `protobuf:"varint,3,opt,name=Active,proto3" json:"Active,omitempty"`
	Provisioned        bool     `protobuf:"varint,4,opt,name=Provisioned,proto3" json:"Provisioned,omitempty"`
	Ready              bool     `protobuf:"varint,5,opt,name=Ready,proto3" json:"Ready,omitempty"`
	Finished           bool     `protobuf:"varint,6,opt,name=Finished,proto3" json:"Finished,omitempty"`
}

func (x *ScheduledEventStatus) Reset() {
	*x = ScheduledEventStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledEventStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledEventStatus) ProtoMessage() {}

func (x *ScheduledEventStatus) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledEventStatus.ProtoReflect.Descriptor instead.
func (*ScheduledEventStatus) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{36}
}

func (x *ScheduledEventStatus) GetAccessCodeId() string {
	if x != nil {
		return x.AccessCodeId
	}
	return ""
}

func (x *ScheduledEventStatus) GetVirtualMachineSets() []string {
	if x != nil {
		return x.VirtualMachineSets
	}
	return nil
}

func (x *ScheduledEventStatus) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *ScheduledEventStatus) GetProvisioned() bool {
	if x != nil {
		return x.Provisioned
	}
	return false
}

func (x *ScheduledEventStatus) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *ScheduledEventStatus) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

type DynamicBindConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string                        `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Spec *DynamicBindConfigurationSpec `protobuf:"bytes,2,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *DynamicBindConfiguration) Reset() {
	*x = DynamicBindConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicBindConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicBindConfiguration) ProtoMessage() {}

func (x *DynamicBindConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicBindConfiguration.ProtoReflect.Descriptor instead.
func (*DynamicBindConfiguration) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{37}
}

func (x *DynamicBindConfiguration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DynamicBindConfiguration) GetSpec() *DynamicBindConfigurationSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type DynamicBindConfigurationSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string           `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Environment         string           `protobuf:"bytes,2,opt,name=Environment,proto3" json:"Environment,omitempty"`
	BaseName            string           `protobuf:"bytes,3,opt,name=BaseName,proto3" json:"BaseName,omitempty"`
	RestrictedBind      bool             `protobuf:"varint,4,opt,name=RestrictedBind,proto3" json:"RestrictedBind,omitempty"`
	RestrictedBindValue string           `protobuf:"bytes,5,opt,name=RestrictedBindValue,proto3" json:"RestrictedBindValue,omitempty"`
	BurstCountCapacity  map[string]int32 `protobuf:"bytes,6,rep,name=BurstCountCapacity,proto3" json:"BurstCountCapacity,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	BurstCapacity       *CMSStruct       `protobuf:"bytes,7,opt,name=BurstCapacity,proto3" json:"BurstCapacity,omitempty"`
}

func (x *DynamicBindConfigurationSpec) Reset() {
	*x = DynamicBindConfigurationSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicBindConfigurationSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicBindConfigurationSpec) ProtoMessage() {}

func (x *DynamicBindConfigurationSpec) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicBindConfigurationSpec.ProtoReflect.Descriptor instead.
func (*DynamicBindConfigurationSpec) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{38}
}

func (x *DynamicBindConfigurationSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DynamicBindConfigurationSpec) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *DynamicBindConfigurationSpec) GetBaseName() string {
	if x != nil {
		return x.BaseName
	}
	return ""
}

func (x *DynamicBindConfigurationSpec) GetRestrictedBind() bool {
	if x != nil {
		return x.RestrictedBind
	}
	return false
}

func (x *DynamicBindConfigurationSpec) GetRestrictedBindValue() string {
	if x != nil {
		return x.RestrictedBindValue
	}
	return ""
}

func (x *DynamicBindConfigurationSpec) GetBurstCountCapacity() map[string]int32 {
	if x != nil {
		return x.BurstCountCapacity
	}
	return nil
}

func (x *DynamicBindConfigurationSpec) GetBurstCapacity() *CMSStruct {
	if x != nil {
		return x.BurstCapacity
	}
	return nil
}

type DynamicBindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string                    `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Spec   *DynamicBindRequestSpec   `protobuf:"bytes,2,opt,name=Spec,proto3" json:"Spec,omitempty"`
	Status *DynamicBindRequestStatus `protobuf:"bytes,3,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *DynamicBindRequest) Reset() {
	*x = DynamicBindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicBindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicBindRequest) ProtoMessage() {}

func (x *DynamicBindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicBindRequest.ProtoReflect.Descriptor instead.
func (*DynamicBindRequest) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{39}
}

func (x *DynamicBindRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DynamicBindRequest) GetSpec() *DynamicBindRequestSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *DynamicBindRequest) GetStatus() *DynamicBindRequestStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type DynamicBindRequestSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	VirtualMachineClaim string `protobuf:"bytes,2,opt,name=VirtualMachineClaim,proto3" json:"VirtualMachineClaim,omitempty"`
	Attempts            int32  `protobuf:"varint,3,opt,name=Attempts,proto3" json:"Attempts,omitempty"`
}

func (x *DynamicBindRequestSpec) Reset() {
	*x = DynamicBindRequestSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicBindRequestSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicBindRequestSpec) ProtoMessage() {}

func (x *DynamicBindRequestSpec) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicBindRequestSpec.ProtoReflect.Descriptor instead.
func (*DynamicBindRequestSpec) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{40}
}

func (x *DynamicBindRequestSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DynamicBindRequestSpec) GetVirtualMachineClaim() string {
	if x != nil {
		return x.VirtualMachineClaim
	}
	return ""
}

func (x *DynamicBindRequestSpec) GetAttempts() int32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

type DynamicBindRequestStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentAttempts            int32             `protobuf:"varint,1,opt,name=CurrentAttempts,proto3" json:"CurrentAttempts,omitempty"`
	Expired                    bool              `protobuf:"varint,2,opt,name=Expired,proto3" json:"Expired,omitempty"`
	Fulfilled                  bool              `protobuf:"varint,3,opt,name=Fulfilled,proto3" json:"Fulfilled,omitempty"`
	DynamicBindConfigurationId string            `protobuf:"bytes,4,opt,name=DynamicBindConfigurationId,proto3" json:"DynamicBindConfigurationId,omitempty"`
	VirtualMachineIds          map[string]string `protobuf:"bytes,5,rep,name=VirtualMachineIds,proto3" json:"VirtualMachineIds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DynamicBindRequestStatus) Reset() {
	*x = DynamicBindRequestStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicBindRequestStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicBindRequestStatus) ProtoMessage() {}

func (x *DynamicBindRequestStatus) ProtoReflect() protoreflect.Message {
	mi := &file_hobbyfarm_hobbyfarm_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicBindRequestStatus.ProtoReflect.Descriptor instead.
func (*DynamicBindRequestStatus) Descriptor() ([]byte, []int) {
	return file_hobbyfarm_hobbyfarm_proto_rawDescGZIP(), []int{41}
}

func (x *DynamicBindRequestStatus) GetCurrentAttempts() int32 {
	if x != nil {
		return x.CurrentAttempts
	}
	return 0
}

func (x *DynamicBindRequestStatus) GetExpired() bool {
	if x != nil {
		return x.Expired
	}
	return false
}

func (x *DynamicBindRequestStatus) GetFulfilled() bool {
	if x != nil {
		return x.Fulfilled
	}
	return false
}

func (x *DynamicBindRequestStatus) GetDynamicBindConfigurationId() string {
	if x != nil {
		return x.DynamicBindConfigurationId
	}
	return ""
}

func (x *DynamicBindRequestStatus) GetVirtualMachineIds() map[string]string {
	if x != nil {
		return x.VirtualMachineIds
	}
	return nil
}

var file_hobbyfarm_hobbyfarm_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptor.MethodOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         5000,
		Name:          "requires_admin",
		Tag:           "varint,5000,opt,name=requires_admin",
		Filename:      "hobbyfarm/hobbyfarm.proto",
	},
	{
		ExtendedType:  (*descriptor.MethodOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         5001,
		Name:          "bypass_auth",
		Tag:           "varint,5001,opt,name=bypass_auth",
		Filename:      "hobbyfarm/hobbyfarm.proto",
	},
}

// Extension fields to descriptor.MethodOptions.
var (
	// optional bool requires_admin = 5000;
	E_RequiresAdmin = &file_hobbyfarm_hobbyfarm_proto_extTypes[0]
	// optional bool bypass_auth = 5001;
	E_BypassAuth = &file_hobbyfarm_hobbyfarm_proto_extTypes[1]
)

var File_hobbyfarm_hobbyfarm_proto protoreflect.FileDescriptor

var file_hobbyfarm_hobbyfarm_proto_rawDesc = []byte{
	0x0a, 0x19, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x66, 0x61, 0x72, 0x6d, 0x2f, 0x68, 0x6f, 0x62, 0x62,
	0x79, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x20, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x6a, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x25,
	0x0a, 0x03, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x03, 0x4d, 0x61, 0x70, 0x1a, 0x36, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x68, 0x0a,
	0x08, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x12, 0x24, 0x0a, 0x03, 0x4d, 0x61, 0x70,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61,
	0x70, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x4d, 0x61, 0x70, 0x1a,
	0x36, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x14, 0x0a, 0x02, 0x49, 0x44, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x7c, 0x0a,
	0x0e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2d, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x12,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x34, 0x0a, 0x15, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x53, 0x65, 0x74, 0x49, 0x64, 0x22, 0xa7, 0x02, 0x0a, 0x14, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x21, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x09, 0x2e, 0x56, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x49, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x49, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x49, 0x50, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x49, 0x50, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x46, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x46, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x57, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x22, 0x8b, 0x01, 0x0a, 0x13, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04,
	0x53, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x32, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf8,
	0x02, 0x0a, 0x17, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x42, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x57, 0x0a, 0x0f,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x5a, 0x0a,
	0x14, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x56, 0x4d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe1, 0x01, 0x0a, 0x19, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x69, 0x6e, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x69, 0x6e, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x42, 0x69, 0x6e,
	0x64, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x42, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x22, 0x5f, 0x0a,
	0x15, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x56, 0x4d, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x5d,
	0x0a, 0x16, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x53, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x22, 0x84, 0x02,
	0x0a, 0x1a, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x4d, 0x53, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x45, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x1a, 0x3b, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x4f, 0x0a, 0x09, 0x43, 0x4d, 0x53, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x50, 0x55, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x43, 0x50, 0x55, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0x73, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2a,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xcf, 0x08, 0x0a, 0x0f, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x44, 0x4e, 0x53, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x4e, 0x53, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0f, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x5e, 0x0a, 0x14, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x49,
	0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x49, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x49,
	0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x12,
	0x1e, 0x0a, 0x0a, 0x57, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x57, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x31, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x72, 0x73, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x42, 0x75, 0x72, 0x73, 0x74, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x26, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x4d, 0x53, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x12, 0x42, 0x75, 0x72,
	0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x42, 0x75, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x12, 0x42, 0x75, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x0d, 0x42, 0x75, 0x72, 0x73, 0x74, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x4d, 0x53,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0d, 0x42, 0x75, 0x72, 0x73, 0x74, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x1a, 0x4e, 0x0a, 0x14, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43,
	0x0a, 0x15, 0x49, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x42, 0x75, 0x72, 0x73, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6, 0x01, 0x0a,
	0x11, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x43, 0x4d, 0x53, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x55, 0x73,
	0x65, 0x64, 0x12, 0x4e, 0x0a, 0x0e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0x41, 0x0a, 0x13, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x85, 0x01, 0x0a, 0x11, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x30, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe5, 0x01,
	0x0a, 0x15, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x56, 0x4d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x56, 0x4d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42,
	0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x17, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x34, 0x0a, 0x08, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x17,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x46, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x54, 0x46, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x46, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x4d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54,
	0x46, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x4d, 0x22, 0x3d, 0x0a,
	0x06, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x53,
	0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x22, 0x98, 0x02, 0x0a,
	0x0a, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x12,
	0x34, 0x0a, 0x0f, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x70, 0x52, 0x0f, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69,
	0x76, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x41, 0x0a, 0x08, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x22, 0xa1, 0x02, 0x0a, 0x0c, 0x53,
	0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x05, 0x53, 0x74, 0x65, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x74, 0x65, 0x70, 0x52,
	0x05, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x34, 0x0a, 0x0f, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x0f, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69,
	0x76, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x75, 0x73, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x50, 0x61, 0x75, 0x73, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x3e,
	0x0a, 0x0c, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x74, 0x65, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x67,
	0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x26, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x56,
	0x6d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x56, 0x6d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x0d,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x4f, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63,
	0x22, 0xb1, 0x02, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x04, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x69,
	0x6e, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x42, 0x69, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x39, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x22,
	0x84, 0x01, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0x7c, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x04,
	0x53, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x91, 0x04, 0x0a, 0x12, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x69, 0x6e,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x42, 0x69, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x73, 0x1a, 0x55, 0x0a, 0x1c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6, 0x01, 0x0a, 0x14, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x53, 0x65, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x22, 0x61, 0x0a, 0x18, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x31, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x53, 0x70, 0x65, 0x63, 0x22, 0xa6, 0x03, 0x0a, 0x1c, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x42, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x61, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x42, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x65, 0x0a,
	0x12, 0x42, 0x75, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x42, 0x75, 0x72, 0x73, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x12, 0x42, 0x75, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x0d, 0x42, 0x75, 0x72, 0x73, 0x74, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x4d,
	0x53, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0d, 0x42, 0x75, 0x72, 0x73, 0x74, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x1a, 0x45, 0x0a, 0x17, 0x42, 0x75, 0x72, 0x73, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x88, 0x01,
	0x0a, 0x12, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x31, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x42,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x76, 0x0a, 0x16, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x22, 0xe2, 0x02, 0x0a, 0x18, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12,
	0x3e, 0x0a, 0x1a, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1a, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x5e, 0x0a, 0x11, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x73, 0x1a,
	0x44, 0x0a, 0x16, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x42, 0x0a, 0x08, 0x56, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x46, 0x50, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x2a, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x61, 0x77,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x01, 0x3a, 0x46, 0x0a,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x88, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x40, 0x0a, 0x0b, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x89, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x79, 0x70,
	0x61, 0x73, 0x73, 0x41, 0x75, 0x74, 0x68, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x66, 0x61, 0x72, 0x6d, 0x2f,
	0x67, 0x61, 0x72, 0x67, 0x61, 0x6e, 0x74, 0x75, 0x61, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hobbyfarm_hobbyfarm_proto_rawDescOnce sync.Once
	file_hobbyfarm_hobbyfarm_proto_rawDescData = file_hobbyfarm_hobbyfarm_proto_rawDesc
)

func file_hobbyfarm_hobbyfarm_proto_rawDescGZIP() []byte {
	file_hobbyfarm_hobbyfarm_proto_rawDescOnce.Do(func() {
		file_hobbyfarm_hobbyfarm_proto_rawDescData = protoimpl.X.CompressGZIP(file_hobbyfarm_hobbyfarm_proto_rawDescData)
	})
	return file_hobbyfarm_hobbyfarm_proto_rawDescData
}

var file_hobbyfarm_hobbyfarm_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_hobbyfarm_hobbyfarm_proto_msgTypes = make([]protoimpl.MessageInfo, 55)
var file_hobbyfarm_hobbyfarm_proto_goTypes = []interface{}{
	(VMStatus)(0),                        // 0: VMStatus
	(CapacityMode)(0),                    // 1: CapacityMode
	(*Empty)(nil),                        // 2: Empty
	(*Status)(nil),                       // 3: Status
	(*StringMap)(nil),                    // 4: StringMap
	(*Int32Map)(nil),                     // 5: Int32Map
	(*ID)(nil),                           // 6: ID
	(*VirtualMachine)(nil),               // 7: VirtualMachine
	(*VirtualMachineSpec)(nil),           // 8: VirtualMachineSpec
	(*VirtualMachineStatus)(nil),         // 9: VirtualMachineStatus
	(*VirtualMachineClaim)(nil),          // 10: VirtualMachineClaim
	(*VirtualMachineClaimSpec)(nil),      // 11: VirtualMachineClaimSpec
	(*VirtualMachineClaimStatus)(nil),    // 12: VirtualMachineClaimStatus
	(*VirtualMachineClaimVM)(nil),        // 13: VirtualMachineClaimVM
	(*VirtualMachineTemplate)(nil),       // 14: VirtualMachineTemplate
	(*VirtualMachineTemplateSpec)(nil),   // 15: VirtualMachineTemplateSpec
	(*CMSStruct)(nil),                    // 16: CMSStruct
	(*Environment)(nil),                  // 17: Environment
	(*EnvironmentSpec)(nil),              // 18: EnvironmentSpec
	(*EnvironmentStatus)(nil),            // 19: EnvironmentStatus
	(*VirtualMachineSet)(nil),            // 20: VirtualMachineSet
	(*VirtualMachineSetSpec)(nil),        // 21: VirtualMachineSetSpec
	(*VirtualMachineSetStatus)(nil),      // 22: VirtualMachineSetStatus
	(*VirtualMachineProvision)(nil),      // 23: VirtualMachineProvision
	(*Course)(nil),                       // 24: Course
	(*CourseSpec)(nil),                   // 25: CourseSpec
	(*Scenario)(nil),                     // 26: Scenario
	(*ScenarioSpec)(nil),                 // 27: ScenarioSpec
	(*ScenarioStep)(nil),                 // 28: ScenarioStep
	(*Session)(nil),                      // 29: Session
	(*SessionSpec)(nil),                  // 30: SessionSpec
	(*SessionStatus)(nil),                // 31: SessionStatus
	(*AccessCode)(nil),                   // 32: AccessCode
	(*AccessCodeSpec)(nil),               // 33: AccessCodeSpec
	(*User)(nil),                         // 34: User
	(*UserSpec)(nil),                     // 35: UserSpec
	(*ScheduledEvent)(nil),               // 36: ScheduledEvent
	(*ScheduledEventSpec)(nil),           // 37: ScheduledEventSpec
	(*ScheduledEventStatus)(nil),         // 38: ScheduledEventStatus
	(*DynamicBindConfiguration)(nil),     // 39: DynamicBindConfiguration
	(*DynamicBindConfigurationSpec)(nil), // 40: DynamicBindConfigurationSpec
	(*DynamicBindRequest)(nil),           // 41: DynamicBindRequest
	(*DynamicBindRequestSpec)(nil),       // 42: DynamicBindRequestSpec
	(*DynamicBindRequestStatus)(nil),     // 43: DynamicBindRequestStatus
	nil,                                  // 44: StringMap.MapEntry
	nil,                                  // 45: Int32Map.MapEntry
	nil,                                  // 46: VirtualMachineClaimSpec.VirtualMachinesEntry
	nil,                                  // 47: VirtualMachineTemplateSpec.CountMapEntry
	nil,                                  // 48: EnvironmentSpec.TemplateMappingEntry
	nil,                                  // 49: EnvironmentSpec.EnvironmentSpecificsEntry
	nil,                                  // 50: EnvironmentSpec.IPTranslationMapEntry
	nil,                                  // 51: EnvironmentSpec.CountCapacityEntry
	nil,                                  // 52: EnvironmentSpec.BurstCountCapacityEntry
	nil,                                  // 53: EnvironmentStatus.AvailableCountEntry
	nil,                                  // 54: ScheduledEventSpec.RequiredVirtualMachinesEntry
	nil,                                  // 55: DynamicBindConfigurationSpec.BurstCountCapacityEntry
	nil,                                  // 56: DynamicBindRequestStatus.VirtualMachineIdsEntry
	(*descriptor.MethodOptions)(nil),     // 57: google.protobuf.MethodOptions
}
var file_hobbyfarm_hobbyfarm_proto_depIdxs = []int32{
	44, // 0: StringMap.Map:type_name -> StringMap.MapEntry
	45, // 1: Int32Map.Map:type_name -> Int32Map.MapEntry
	8,  // 2: VirtualMachine.Spec:type_name -> VirtualMachineSpec
	9,  // 3: VirtualMachine.Status:type_name -> VirtualMachineStatus
	0,  // 4: VirtualMachineStatus.Status:type_name -> VMStatus
	11, // 5: VirtualMachineClaim.Spec:type_name -> VirtualMachineClaimSpec
	12, // 6: VirtualMachineClaim.Status:type_name -> VirtualMachineClaimStatus
	46, // 7: VirtualMachineClaimSpec.VirtualMachines:type_name -> VirtualMachineClaimSpec.VirtualMachinesEntry
	15, // 8: VirtualMachineTemplate.Spec:type_name -> VirtualMachineTemplateSpec
	16, // 9: VirtualMachineTemplateSpec.Resources:type_name -> CMSStruct
	47, // 10: VirtualMachineTemplateSpec.CountMap:type_name -> VirtualMachineTemplateSpec.CountMapEntry
	18, // 11: Environment.Spec:type_name -> EnvironmentSpec
	19, // 12: Environment.Status:type_name -> EnvironmentStatus
	48, // 13: EnvironmentSpec.TemplateMapping:type_name -> EnvironmentSpec.TemplateMappingEntry
	49, // 14: EnvironmentSpec.EnvironmentSpecifics:type_name -> EnvironmentSpec.EnvironmentSpecificsEntry
	50, // 15: EnvironmentSpec.IPTranslationMap:type_name -> EnvironmentSpec.IPTranslationMapEntry
	1,  // 16: EnvironmentSpec.CapacityMode:type_name -> CapacityMode
	51, // 17: EnvironmentSpec.CountCapacity:type_name -> EnvironmentSpec.CountCapacityEntry
	16, // 18: EnvironmentSpec.Capacity:type_name -> CMSStruct
	52, // 19: EnvironmentSpec.BurstCountCapacity:type_name -> EnvironmentSpec.BurstCountCapacityEntry
	16, // 20: EnvironmentSpec.BurstCapacity:type_name -> CMSStruct
	16, // 21: EnvironmentStatus.Used:type_name -> CMSStruct
	53, // 22: EnvironmentStatus.AvailableCount:type_name -> EnvironmentStatus.AvailableCountEntry
	21, // 23: VirtualMachineSet.Spec:type_name -> VirtualMachineSetSpec
	22, // 24: VirtualMachineSet.Status:type_name -> VirtualMachineSetStatus
	23, // 25: VirtualMachineSetStatus.Machines:type_name -> VirtualMachineProvision
	25, // 26: Course.Spec:type_name -> CourseSpec
	4,  // 27: CourseSpec.VirtualMachines:type_name -> StringMap
	27, // 28: Scenario.Spec:type_name -> ScenarioSpec
	28, // 29: ScenarioSpec.Steps:type_name -> ScenarioStep
	4,  // 30: ScenarioSpec.VirtualMachines:type_name -> StringMap
	30, // 31: Session.Spec:type_name -> SessionSpec
	31, // 32: Session.Status:type_name -> SessionStatus
	33, // 33: AccessCode.Spec:type_name -> AccessCodeSpec
	35, // 34: User.Spec:type_name -> UserSpec
	37, // 35: ScheduledEvent.Spec:type_name -> ScheduledEventSpec
	38, // 36: ScheduledEvent.Status:type_name -> ScheduledEventStatus
	54, // 37: ScheduledEventSpec.RequiredVirtualMachines:type_name -> ScheduledEventSpec.RequiredVirtualMachinesEntry
	40, // 38: DynamicBindConfiguration.Spec:type_name -> DynamicBindConfigurationSpec
	55, // 39: DynamicBindConfigurationSpec.BurstCountCapacity:type_name -> DynamicBindConfigurationSpec.BurstCountCapacityEntry
	16, // 40: DynamicBindConfigurationSpec.BurstCapacity:type_name -> CMSStruct
	42, // 41: DynamicBindRequest.Spec:type_name -> DynamicBindRequestSpec
	43, // 42: DynamicBindRequest.Status:type_name -> DynamicBindRequestStatus
	56, // 43: DynamicBindRequestStatus.VirtualMachineIds:type_name -> DynamicBindRequestStatus.VirtualMachineIdsEntry
	13, // 44: VirtualMachineClaimSpec.VirtualMachinesEntry.value:type_name -> VirtualMachineClaimVM
	4,  // 45: EnvironmentSpec.TemplateMappingEntry.value:type_name -> StringMap
	5,  // 46: ScheduledEventSpec.RequiredVirtualMachinesEntry.value:type_name -> Int32Map
	57, // 47: requires_admin:extendee -> google.protobuf.MethodOptions
	57, // 48: bypass_auth:extendee -> google.protobuf.MethodOptions
	49, // [49:49] is the sub-list for method output_type
	49, // [49:49] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	47, // [47:49] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_hobbyfarm_hobbyfarm_proto_init() }
func file_hobbyfarm_hobbyfarm_proto_init() {
	if File_hobbyfarm_hobbyfarm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hobbyfarm_hobbyfarm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int32Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineClaimSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineClaimStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineClaimVM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineTemplateSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMSStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Environment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineSetSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineSetStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineProvision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Course); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourseSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scenario); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenarioSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenarioStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessCodeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledEventSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledEventStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicBindConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicBindConfigurationSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicBindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicBindRequestSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hobbyfarm_hobbyfarm_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicBindRequestStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hobbyfarm_hobbyfarm_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   55,
			NumExtensions: 2,
			NumServices:   0,
		},
		GoTypes:           file_hobbyfarm_hobbyfarm_proto_goTypes,
		DependencyIndexes: file_hobbyfarm_hobbyfarm_proto_depIdxs,
		EnumInfos:         file_hobbyfarm_hobbyfarm_proto_enumTypes,
		MessageInfos:      file_hobbyfarm_hobbyfarm_proto_msgTypes,
		ExtensionInfos:    file_hobbyfarm_hobbyfarm_proto_extTypes,
	}.Build()
	File_hobbyfarm_hobbyfarm_proto = out.File
	file_hobbyfarm_hobbyfarm_proto_rawDesc = nil
	file_hobbyfarm_hobbyfarm_proto_goTypes = nil
	file_hobbyfarm_hobbyfarm_proto_depIdxs = nil
}
