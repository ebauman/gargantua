// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: hobbyfarm/hobbyfarm.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _hobbyfarm_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Empty) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// EmptyValidationError is the validation error returned by Empty.Validate if
// the designated constraints aren't met.
type EmptyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyValidationError) ErrorName() string { return "EmptyValidationError" }

// Error satisfies the builtin error interface
func (e EmptyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmpty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyValidationError{}

// Validate checks the field values on StringMap with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *StringMap) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Map

	return nil
}

// StringMapValidationError is the validation error returned by
// StringMap.Validate if the designated constraints aren't met.
type StringMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringMapValidationError) ErrorName() string { return "StringMapValidationError" }

// Error satisfies the builtin error interface
func (e StringMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringMapValidationError{}

// Validate checks the field values on Int32Map with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Int32Map) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Map

	return nil
}

// Int32MapValidationError is the validation error returned by
// Int32Map.Validate if the designated constraints aren't met.
type Int32MapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int32MapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int32MapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int32MapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int32MapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int32MapValidationError) ErrorName() string { return "Int32MapValidationError" }

// Error satisfies the builtin error interface
func (e Int32MapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt32Map.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int32MapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int32MapValidationError{}

// Validate checks the field values on ID with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *ID) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	return nil
}

// IDValidationError is the validation error returned by ID.Validate if the
// designated constraints aren't met.
type IDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDValidationError) ErrorName() string { return "IDValidationError" }

// Error satisfies the builtin error interface
func (e IDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDValidationError{}

// Validate checks the field values on VirtualMachine with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *VirtualMachine) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VirtualMachineValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VirtualMachineValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VirtualMachineValidationError is the validation error returned by
// VirtualMachine.Validate if the designated constraints aren't met.
type VirtualMachineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineValidationError) ErrorName() string { return "VirtualMachineValidationError" }

// Error satisfies the builtin error interface
func (e VirtualMachineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachine.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineValidationError{}

// Validate checks the field values on VirtualMachineSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VirtualMachineSpec) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for VirtualMachineTemplateId

	// no validation rules for KeyPair

	// no validation rules for VirtualMachineClaimId

	// no validation rules for UserId

	// no validation rules for Provision

	// no validation rules for VirtualMachineSetId

	return nil
}

// VirtualMachineSpecValidationError is the validation error returned by
// VirtualMachineSpec.Validate if the designated constraints aren't met.
type VirtualMachineSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineSpecValidationError) ErrorName() string {
	return "VirtualMachineSpecValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualMachineSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachineSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineSpecValidationError{}

// Validate checks the field values on VirtualMachineStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VirtualMachineStatus) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for Allocated

	// no validation rules for Tainted

	// no validation rules for PublicIP

	// no validation rules for PrivateIP

	// no validation rules for EnvironmentId

	// no validation rules for Hostname

	// no validation rules for TFState

	// no validation rules for WsEndpoint

	return nil
}

// VirtualMachineStatusValidationError is the validation error returned by
// VirtualMachineStatus.Validate if the designated constraints aren't met.
type VirtualMachineStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineStatusValidationError) ErrorName() string {
	return "VirtualMachineStatusValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualMachineStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachineStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineStatusValidationError{}

// Validate checks the field values on VirtualMachineClaim with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VirtualMachineClaim) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VirtualMachineClaimValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VirtualMachineClaimValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VirtualMachineClaimValidationError is the validation error returned by
// VirtualMachineClaim.Validate if the designated constraints aren't met.
type VirtualMachineClaimValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineClaimValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineClaimValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineClaimValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineClaimValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineClaimValidationError) ErrorName() string {
	return "VirtualMachineClaimValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualMachineClaimValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachineClaim.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineClaimValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineClaimValidationError{}

// Validate checks the field values on VirtualMachineClaimSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VirtualMachineClaimSpec) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for RestrictedBind

	// no validation rules for RestrictedBindValue

	for key, val := range m.GetVirtualMachines() {
		_ = val

		// no validation rules for VirtualMachines[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VirtualMachineClaimSpecValidationError{
					field:  fmt.Sprintf("VirtualMachines[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DynamicCapable

	return nil
}

// VirtualMachineClaimSpecValidationError is the validation error returned by
// VirtualMachineClaimSpec.Validate if the designated constraints aren't met.
type VirtualMachineClaimSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineClaimSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineClaimSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineClaimSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineClaimSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineClaimSpecValidationError) ErrorName() string {
	return "VirtualMachineClaimSpecValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualMachineClaimSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachineClaimSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineClaimSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineClaimSpecValidationError{}

// Validate checks the field values on VirtualMachineClaimStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VirtualMachineClaimStatus) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BindMode

	// no validation rules for StaticBindAttempts

	// no validation rules for DynamicBindRequestId

	// no validation rules for Bound

	// no validation rules for Ready

	// no validation rules for Tainted

	return nil
}

// VirtualMachineClaimStatusValidationError is the validation error returned by
// VirtualMachineClaimStatus.Validate if the designated constraints aren't met.
type VirtualMachineClaimStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineClaimStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineClaimStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineClaimStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineClaimStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineClaimStatusValidationError) ErrorName() string {
	return "VirtualMachineClaimStatusValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualMachineClaimStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachineClaimStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineClaimStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineClaimStatusValidationError{}

// Validate checks the field values on VirtualMachineClaimVM with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VirtualMachineClaimVM) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Template

	// no validation rules for VirtualMachineId

	return nil
}

// VirtualMachineClaimVMValidationError is the validation error returned by
// VirtualMachineClaimVM.Validate if the designated constraints aren't met.
type VirtualMachineClaimVMValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineClaimVMValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineClaimVMValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineClaimVMValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineClaimVMValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineClaimVMValidationError) ErrorName() string {
	return "VirtualMachineClaimVMValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualMachineClaimVMValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachineClaimVM.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineClaimVMValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineClaimVMValidationError{}

// Validate checks the field values on VirtualMachineTemplate with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VirtualMachineTemplate) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VirtualMachineTemplateValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VirtualMachineTemplateValidationError is the validation error returned by
// VirtualMachineTemplate.Validate if the designated constraints aren't met.
type VirtualMachineTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineTemplateValidationError) ErrorName() string {
	return "VirtualMachineTemplateValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualMachineTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachineTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineTemplateValidationError{}

// Validate checks the field values on VirtualMachineTemplateSpec with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VirtualMachineTemplateSpec) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Image

	if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VirtualMachineTemplateSpecValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CountMap

	return nil
}

// VirtualMachineTemplateSpecValidationError is the validation error returned
// by VirtualMachineTemplateSpec.Validate if the designated constraints aren't met.
type VirtualMachineTemplateSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineTemplateSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineTemplateSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineTemplateSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineTemplateSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineTemplateSpecValidationError) ErrorName() string {
	return "VirtualMachineTemplateSpecValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualMachineTemplateSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachineTemplateSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineTemplateSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineTemplateSpecValidationError{}

// Validate checks the field values on CMSStruct with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CMSStruct) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CPU

	// no validation rules for Memory

	// no validation rules for Storage

	return nil
}

// CMSStructValidationError is the validation error returned by
// CMSStruct.Validate if the designated constraints aren't met.
type CMSStructValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMSStructValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMSStructValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMSStructValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMSStructValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMSStructValidationError) ErrorName() string { return "CMSStructValidationError" }

// Error satisfies the builtin error interface
func (e CMSStructValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMSStruct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMSStructValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMSStructValidationError{}

// Validate checks the field values on Environment with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Environment) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnvironmentValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnvironmentValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EnvironmentValidationError is the validation error returned by
// Environment.Validate if the designated constraints aren't met.
type EnvironmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvironmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvironmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvironmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvironmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvironmentValidationError) ErrorName() string { return "EnvironmentValidationError" }

// Error satisfies the builtin error interface
func (e EnvironmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvironment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvironmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvironmentValidationError{}

// Validate checks the field values on EnvironmentSpec with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EnvironmentSpec) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DisplayName

	// no validation rules for DNSSuffix

	// no validation rules for Provider

	for key, val := range m.GetTemplateMapping() {
		_ = val

		// no validation rules for TemplateMapping[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnvironmentSpecValidationError{
					field:  fmt.Sprintf("TemplateMapping[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for EnvironmentSpecifics

	// no validation rules for IPTranslationMap

	// no validation rules for WsEndpoint

	// no validation rules for CapacityMode

	// no validation rules for BurstCapable

	// no validation rules for CountCapacity

	if v, ok := interface{}(m.GetCapacity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnvironmentSpecValidationError{
				field:  "Capacity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BurstCountCapacity

	if v, ok := interface{}(m.GetBurstCapacity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnvironmentSpecValidationError{
				field:  "BurstCapacity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EnvironmentSpecValidationError is the validation error returned by
// EnvironmentSpec.Validate if the designated constraints aren't met.
type EnvironmentSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvironmentSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvironmentSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvironmentSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvironmentSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvironmentSpecValidationError) ErrorName() string { return "EnvironmentSpecValidationError" }

// Error satisfies the builtin error interface
func (e EnvironmentSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvironmentSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvironmentSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvironmentSpecValidationError{}

// Validate checks the field values on EnvironmentStatus with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EnvironmentStatus) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUsed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnvironmentStatusValidationError{
				field:  "Used",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AvailableCount

	return nil
}

// EnvironmentStatusValidationError is the validation error returned by
// EnvironmentStatus.Validate if the designated constraints aren't met.
type EnvironmentStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvironmentStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvironmentStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvironmentStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvironmentStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvironmentStatusValidationError) ErrorName() string {
	return "EnvironmentStatusValidationError"
}

// Error satisfies the builtin error interface
func (e EnvironmentStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvironmentStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvironmentStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvironmentStatusValidationError{}

// Validate checks the field values on VirtualMachineSet with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *VirtualMachineSet) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VirtualMachineSetValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VirtualMachineSetValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VirtualMachineSetValidationError is the validation error returned by
// VirtualMachineSet.Validate if the designated constraints aren't met.
type VirtualMachineSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineSetValidationError) ErrorName() string {
	return "VirtualMachineSetValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualMachineSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachineSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineSetValidationError{}

// Validate checks the field values on VirtualMachineSetSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VirtualMachineSetSpec) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Count

	// no validation rules for Environment

	// no validation rules for VMTemplate

	// no validation rules for BaseName

	// no validation rules for RestrictedBind

	// no validation rules for RestrictedBindValue

	return nil
}

// VirtualMachineSetSpecValidationError is the validation error returned by
// VirtualMachineSetSpec.Validate if the designated constraints aren't met.
type VirtualMachineSetSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineSetSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineSetSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineSetSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineSetSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineSetSpecValidationError) ErrorName() string {
	return "VirtualMachineSetSpecValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualMachineSetSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachineSetSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineSetSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineSetSpecValidationError{}

// Validate checks the field values on VirtualMachineSetStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VirtualMachineSetStatus) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMachines() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VirtualMachineSetStatusValidationError{
					field:  fmt.Sprintf("Machines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AvailableCount

	// no validation rules for ProvisionedCount

	return nil
}

// VirtualMachineSetStatusValidationError is the validation error returned by
// VirtualMachineSetStatus.Validate if the designated constraints aren't met.
type VirtualMachineSetStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineSetStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineSetStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineSetStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineSetStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineSetStatusValidationError) ErrorName() string {
	return "VirtualMachineSetStatusValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualMachineSetStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachineSetStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineSetStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineSetStatusValidationError{}

// Validate checks the field values on VirtualMachineProvision with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VirtualMachineProvision) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for VirtualMachineName

	// no validation rules for TFControllerState

	// no validation rules for TFControllerCM

	return nil
}

// VirtualMachineProvisionValidationError is the validation error returned by
// VirtualMachineProvision.Validate if the designated constraints aren't met.
type VirtualMachineProvisionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineProvisionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineProvisionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineProvisionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineProvisionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineProvisionValidationError) ErrorName() string {
	return "VirtualMachineProvisionValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualMachineProvisionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachineProvision.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineProvisionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineProvisionValidationError{}

// Validate checks the field values on Course with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Course) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CourseValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CourseValidationError is the validation error returned by Course.Validate if
// the designated constraints aren't met.
type CourseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseValidationError) ErrorName() string { return "CourseValidationError" }

// Error satisfies the builtin error interface
func (e CourseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseValidationError{}

// Validate checks the field values on CourseSpec with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CourseSpec) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	for idx, item := range m.GetVirtualMachines() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CourseSpecValidationError{
					field:  fmt.Sprintf("VirtualMachines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for KeepAliveDuration

	// no validation rules for PauseDuration

	// no validation rules for Pauseable

	return nil
}

// CourseSpecValidationError is the validation error returned by
// CourseSpec.Validate if the designated constraints aren't met.
type CourseSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseSpecValidationError) ErrorName() string { return "CourseSpecValidationError" }

// Error satisfies the builtin error interface
func (e CourseSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseSpecValidationError{}

// Validate checks the field values on Scenario with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Scenario) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScenarioValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ScenarioValidationError is the validation error returned by
// Scenario.Validate if the designated constraints aren't met.
type ScenarioValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScenarioValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScenarioValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScenarioValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScenarioValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScenarioValidationError) ErrorName() string { return "ScenarioValidationError" }

// Error satisfies the builtin error interface
func (e ScenarioValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScenario.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScenarioValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScenarioValidationError{}

// Validate checks the field values on ScenarioSpec with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ScenarioSpec) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	for idx, item := range m.GetSteps() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScenarioSpecValidationError{
					field:  fmt.Sprintf("Steps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetVirtualMachines() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScenarioSpecValidationError{
					field:  fmt.Sprintf("VirtualMachines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for KeepAliveDuration

	// no validation rules for PauseDuration

	// no validation rules for Pauseable

	return nil
}

// ScenarioSpecValidationError is the validation error returned by
// ScenarioSpec.Validate if the designated constraints aren't met.
type ScenarioSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScenarioSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScenarioSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScenarioSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScenarioSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScenarioSpecValidationError) ErrorName() string { return "ScenarioSpecValidationError" }

// Error satisfies the builtin error interface
func (e ScenarioSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScenarioSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScenarioSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScenarioSpecValidationError{}

// Validate checks the field values on ScenarioStep with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ScenarioStep) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	// no validation rules for Content

	return nil
}

// ScenarioStepValidationError is the validation error returned by
// ScenarioStep.Validate if the designated constraints aren't met.
type ScenarioStepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScenarioStepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScenarioStepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScenarioStepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScenarioStepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScenarioStepValidationError) ErrorName() string { return "ScenarioStepValidationError" }

// Error satisfies the builtin error interface
func (e ScenarioStepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScenarioStep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScenarioStepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScenarioStepValidationError{}

// Validate checks the field values on Session with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Session) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SessionValidationError is the validation error returned by Session.Validate
// if the designated constraints aren't met.
type SessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionValidationError) ErrorName() string { return "SessionValidationError" }

// Error satisfies the builtin error interface
func (e SessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSession.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionValidationError{}

// Validate checks the field values on SessionSpec with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SessionSpec) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for ScenarioId

	// no validation rules for CourseId

	// no validation rules for UserId

	// no validation rules for AccessCode

	return nil
}

// SessionSpecValidationError is the validation error returned by
// SessionSpec.Validate if the designated constraints aren't met.
type SessionSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionSpecValidationError) ErrorName() string { return "SessionSpecValidationError" }

// Error satisfies the builtin error interface
func (e SessionSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionSpecValidationError{}

// Validate checks the field values on SessionStatus with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SessionStatus) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Paused

	// no validation rules for PausedTime

	// no validation rules for Active

	// no validation rules for Finished

	// no validation rules for StartTime

	// no validation rules for ExpirationTime

	return nil
}

// SessionStatusValidationError is the validation error returned by
// SessionStatus.Validate if the designated constraints aren't met.
type SessionStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionStatusValidationError) ErrorName() string { return "SessionStatusValidationError" }

// Error satisfies the builtin error interface
func (e SessionStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionStatusValidationError{}

// Validate checks the field values on AccessCode with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AccessCode) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if m.GetSpec() == nil {
		return AccessCodeValidationError{
			field:  "Spec",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccessCodeValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AccessCodeValidationError is the validation error returned by
// AccessCode.Validate if the designated constraints aren't met.
type AccessCodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessCodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessCodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessCodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessCodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessCodeValidationError) ErrorName() string { return "AccessCodeValidationError" }

// Error satisfies the builtin error interface
func (e AccessCodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessCode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessCodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessCodeValidationError{}

// Validate checks the field values on AccessCodeSpec with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AccessCodeSpec) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCode()) < 4 {
		return AccessCodeSpecValidationError{
			field:  "Code",
			reason: "value length must be at least 4 runes",
		}
	}

	// no validation rules for Description

	// no validation rules for Expiration

	// no validation rules for RestrictedBind

	// no validation rules for RestrictedBindValue

	return nil
}

// AccessCodeSpecValidationError is the validation error returned by
// AccessCodeSpec.Validate if the designated constraints aren't met.
type AccessCodeSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessCodeSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessCodeSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessCodeSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessCodeSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessCodeSpecValidationError) ErrorName() string { return "AccessCodeSpecValidationError" }

// Error satisfies the builtin error interface
func (e AccessCodeSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessCodeSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessCodeSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessCodeSpecValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *User) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on UserSpec with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UserSpec) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Email

	// no validation rules for Password

	// no validation rules for Admin

	return nil
}

// UserSpecValidationError is the validation error returned by
// UserSpec.Validate if the designated constraints aren't met.
type UserSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserSpecValidationError) ErrorName() string { return "UserSpecValidationError" }

// Error satisfies the builtin error interface
func (e UserSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserSpecValidationError{}

// Validate checks the field values on ScheduledEvent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ScheduledEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduledEventValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduledEventValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ScheduledEventValidationError is the validation error returned by
// ScheduledEvent.Validate if the designated constraints aren't met.
type ScheduledEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduledEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduledEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduledEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduledEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduledEventValidationError) ErrorName() string { return "ScheduledEventValidationError" }

// Error satisfies the builtin error interface
func (e ScheduledEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduledEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduledEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduledEventValidationError{}

// Validate checks the field values on ScheduledEventSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ScheduledEventSpec) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Creator

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for StartTime

	// no validation rules for EndTime

	for key, val := range m.GetRequiredVirtualMachines() {
		_ = val

		// no validation rules for RequiredVirtualMachines[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScheduledEventSpecValidationError{
					field:  fmt.Sprintf("RequiredVirtualMachines[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AccessCode

	// no validation rules for RestrictedBind

	// no validation rules for RestrictedBindValue

	return nil
}

// ScheduledEventSpecValidationError is the validation error returned by
// ScheduledEventSpec.Validate if the designated constraints aren't met.
type ScheduledEventSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduledEventSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduledEventSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduledEventSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduledEventSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduledEventSpecValidationError) ErrorName() string {
	return "ScheduledEventSpecValidationError"
}

// Error satisfies the builtin error interface
func (e ScheduledEventSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduledEventSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduledEventSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduledEventSpecValidationError{}

// Validate checks the field values on ScheduledEventStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ScheduledEventStatus) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessCodeId

	// no validation rules for Active

	// no validation rules for Provisioned

	// no validation rules for Ready

	// no validation rules for Finished

	return nil
}

// ScheduledEventStatusValidationError is the validation error returned by
// ScheduledEventStatus.Validate if the designated constraints aren't met.
type ScheduledEventStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduledEventStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduledEventStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduledEventStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduledEventStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduledEventStatusValidationError) ErrorName() string {
	return "ScheduledEventStatusValidationError"
}

// Error satisfies the builtin error interface
func (e ScheduledEventStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduledEventStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduledEventStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduledEventStatusValidationError{}

// Validate checks the field values on DynamicBindConfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DynamicBindConfiguration) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DynamicBindConfigurationValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DynamicBindConfigurationValidationError is the validation error returned by
// DynamicBindConfiguration.Validate if the designated constraints aren't met.
type DynamicBindConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DynamicBindConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DynamicBindConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DynamicBindConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DynamicBindConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DynamicBindConfigurationValidationError) ErrorName() string {
	return "DynamicBindConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e DynamicBindConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDynamicBindConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DynamicBindConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DynamicBindConfigurationValidationError{}

// Validate checks the field values on DynamicBindConfigurationSpec with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DynamicBindConfigurationSpec) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Environment

	// no validation rules for BaseName

	// no validation rules for RestrictedBind

	// no validation rules for RestrictedBindValue

	// no validation rules for BurstCountCapacity

	if v, ok := interface{}(m.GetBurstCapacity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DynamicBindConfigurationSpecValidationError{
				field:  "BurstCapacity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DynamicBindConfigurationSpecValidationError is the validation error returned
// by DynamicBindConfigurationSpec.Validate if the designated constraints
// aren't met.
type DynamicBindConfigurationSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DynamicBindConfigurationSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DynamicBindConfigurationSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DynamicBindConfigurationSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DynamicBindConfigurationSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DynamicBindConfigurationSpecValidationError) ErrorName() string {
	return "DynamicBindConfigurationSpecValidationError"
}

// Error satisfies the builtin error interface
func (e DynamicBindConfigurationSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDynamicBindConfigurationSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DynamicBindConfigurationSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DynamicBindConfigurationSpecValidationError{}

// Validate checks the field values on DynamicBindRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DynamicBindRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DynamicBindRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DynamicBindRequestValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DynamicBindRequestValidationError is the validation error returned by
// DynamicBindRequest.Validate if the designated constraints aren't met.
type DynamicBindRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DynamicBindRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DynamicBindRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DynamicBindRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DynamicBindRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DynamicBindRequestValidationError) ErrorName() string {
	return "DynamicBindRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DynamicBindRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDynamicBindRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DynamicBindRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DynamicBindRequestValidationError{}

// Validate checks the field values on DynamicBindRequestSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DynamicBindRequestSpec) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for VirtualMachineClaim

	// no validation rules for Attempts

	return nil
}

// DynamicBindRequestSpecValidationError is the validation error returned by
// DynamicBindRequestSpec.Validate if the designated constraints aren't met.
type DynamicBindRequestSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DynamicBindRequestSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DynamicBindRequestSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DynamicBindRequestSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DynamicBindRequestSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DynamicBindRequestSpecValidationError) ErrorName() string {
	return "DynamicBindRequestSpecValidationError"
}

// Error satisfies the builtin error interface
func (e DynamicBindRequestSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDynamicBindRequestSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DynamicBindRequestSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DynamicBindRequestSpecValidationError{}

// Validate checks the field values on DynamicBindRequestStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DynamicBindRequestStatus) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CurrentAttempts

	// no validation rules for Expired

	// no validation rules for Fulfilled

	// no validation rules for DynamicBindConfigurationId

	// no validation rules for VirtualMachineIds

	return nil
}

// DynamicBindRequestStatusValidationError is the validation error returned by
// DynamicBindRequestStatus.Validate if the designated constraints aren't met.
type DynamicBindRequestStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DynamicBindRequestStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DynamicBindRequestStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DynamicBindRequestStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DynamicBindRequestStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DynamicBindRequestStatusValidationError) ErrorName() string {
	return "DynamicBindRequestStatusValidationError"
}

// Error satisfies the builtin error interface
func (e DynamicBindRequestStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDynamicBindRequestStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DynamicBindRequestStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DynamicBindRequestStatusValidationError{}
