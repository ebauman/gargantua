/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

// +k8s:deepcopy-gen=package
// +groupName=hobbyfarm.io
package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// EnvironmentList is a list of Environment resources
type EnvironmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []Environment `json:"items"`
}

func NewEnvironment(namespace, name string, obj Environment) *Environment {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("Environment").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// VirtualMachineClaimList is a list of VirtualMachineClaim resources
type VirtualMachineClaimList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []VirtualMachineClaim `json:"items"`
}

func NewVirtualMachineClaim(namespace, name string, obj VirtualMachineClaim) *VirtualMachineClaim {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("VirtualMachineClaim").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// VirtualMachineSetList is a list of VirtualMachineSet resources
type VirtualMachineSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []VirtualMachineSet `json:"items"`
}

func NewVirtualMachineSet(namespace, name string, obj VirtualMachineSet) *VirtualMachineSet {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("VirtualMachineSet").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ScenarioSessionList is a list of ScenarioSession resources
type ScenarioSessionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []ScenarioSession `json:"items"`
}

func NewScenarioSession(namespace, name string, obj ScenarioSession) *ScenarioSession {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("ScenarioSession").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ScenarioList is a list of Scenario resources
type ScenarioList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []Scenario `json:"items"`
}

func NewScenario(namespace, name string, obj Scenario) *Scenario {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("Scenario").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// AccessCodeList is a list of AccessCode resources
type AccessCodeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []AccessCode `json:"items"`
}

func NewAccessCode(namespace, name string, obj AccessCode) *AccessCode {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("AccessCode").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// UserList is a list of User resources
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []User `json:"items"`
}

func NewUser(namespace, name string, obj User) *User {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("User").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// DynamicBindConfigurationList is a list of DynamicBindConfiguration resources
type DynamicBindConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []DynamicBindConfiguration `json:"items"`
}

func NewDynamicBindConfiguration(namespace, name string, obj DynamicBindConfiguration) *DynamicBindConfiguration {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("DynamicBindConfiguration").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// DynamicBindRequestList is a list of DynamicBindRequest resources
type DynamicBindRequestList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []DynamicBindRequest `json:"items"`
}

func NewDynamicBindRequest(namespace, name string, obj DynamicBindRequest) *DynamicBindRequest {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("DynamicBindRequest").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ScheduledEventList is a list of ScheduledEvent resources
type ScheduledEventList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []ScheduledEvent `json:"items"`
}

func NewScheduledEvent(namespace, name string, obj ScheduledEvent) *ScheduledEvent {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("ScheduledEvent").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// VirtualMachineList is a list of VirtualMachine resources
type VirtualMachineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []VirtualMachine `json:"items"`
}

func NewVirtualMachine(namespace, name string, obj VirtualMachine) *VirtualMachine {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("VirtualMachine").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// VirtualMachineTemplateList is a list of VirtualMachineTemplate resources
type VirtualMachineTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []VirtualMachineTemplate `json:"items"`
}

func NewVirtualMachineTemplate(namespace, name string, obj VirtualMachineTemplate) *VirtualMachineTemplate {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("VirtualMachineTemplate").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}
